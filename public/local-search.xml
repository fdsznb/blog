<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>未完成的事情</title>
    <link href="/2099/02/16/%E6%9C%AA%E5%AE%8C%E6%88%90%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    <url>/2099/02/16/%E6%9C%AA%E5%AE%8C%E6%88%90%E7%9A%84%E4%BA%8B%E6%83%85/</url>
    
    <content type="html"><![CDATA[<h3 id="最重要的事"><a href="#最重要的事" class="headerlink" title="最重要的事"></a>最重要的事</h3><ol><li>Java 多线程</li><li>算法</li></ol><ul><li><p>Acwing：算法基础, 算法提高课, 算法进阶课</p></li><li><p>理论：分布式，CAP，BASE，设计模式</p></li><li><p>基础：计算机体系结构，计算机网络，操作系统，计算机组成原理，编译原理</p></li><li><p>Java：多线程，集合，IO，JVM 虚拟机</p></li><li><p>框架：Spring，Spring MVC，Spring Boot,Spring Cloud，Netty</p></li><li><p>中间件：ZooKeeper，Redis，RabbitMQ，Rocket MQ，Kafka，Dubbo</p></li><li><p>数据库：MySQL，MongDB，Elasticsearch</p></li><li><p>容器：Docker，K8S</p></li><li><p>音乐：乐理知识，和声学习，汤1—汤5，流行歌曲部分伴奏。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>并发编程线程基础二</title>
    <link href="/2023/02/17/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AF%87/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
    <url>/2023/02/17/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AF%87/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="1-什么是多线程并发编程"><a href="#1-什么是多线程并发编程" class="headerlink" title="1.什么是多线程并发编程"></a>1.什么是多线程并发编程</h3><ul><li>并发：并发是指一个时间段内多个任务同时在执行，并且都没有执行结束。</li><li>并行：并行是指单位时间内多个任务同时在执行。<blockquote><p>并发任务强调在一个时间段内同时执行，而一个时间段由多个单位时间累积而成，所以说并发的多个任务在单位时间内不一定同时在执行。</p></blockquote></li></ul><h3 id="2-为什么要进行多线程并发编程"><a href="#2-为什么要进行多线程并发编程" class="headerlink" title="2.为什么要进行多线程并发编程"></a>2.为什么要进行多线程并发编程</h3><p>多核 CPU 时代的到来打破了单核 CPU 对多线程效能的限制。多个 CPU 意味着每个线程可以使用自己的 CPU 运行，这减少了线程上下文的开销，但随着对应用系统性能和吞吐量要求的提高，出现了处理海量数据和请求的要求，这些都对高并发编程有着迫切的需求。</p><h3 id="3-Java-中的线程安全问题"><a href="#3-Java-中的线程安全问题" class="headerlink" title="3.Java 中的线程安全问题"></a>3.Java 中的线程安全问题</h3><p>线程安全问题是指当多个线程同时读写一个共享资源并且没有任何同步措施时，导致出现脏数据或者其他不可预见的结果的问题。</p><h3 id="4-Java-中共享变量的内存可见性问题"><a href="#4-Java-中共享变量的内存可见性问题" class="headerlink" title="4.Java 中共享变量的内存可见性问题"></a>4.Java 中共享变量的内存可见性问题</h3><p>Java 内存规模规定，将所有的变量都存放在主内存中，当线程使用变量时，会把主内存里面的变量复制到自己的工作空间或者叫工作内存，线程读写变量时操作的是自己工作内存的变量。</p><blockquote><p>多线程情况下会出现内存不可见问题</p></blockquote><h3 id="5-Java-中的-synchronized-关键字"><a href="#5-Java-中的-synchronized-关键字" class="headerlink" title="5. Java 中的 synchronized 关键字"></a>5. Java 中的 synchronized 关键字</h3><h4 id="5-1-synchronized-关键字介绍"><a href="#5-1-synchronized-关键字介绍" class="headerlink" title="5.1 synchronized 关键字介绍"></a>5.1 synchronized 关键字介绍</h4><p>synchronized 块是 Java 提供的一种原子性内置锁，Java 中的每个对象都可以把它当作一个同步锁来使用，这些 Java 内置的使用者看不到的锁被称为内部锁，也叫作监视器锁。</p><blockquote><p>线程的执行代码进入 synchronized 代码块前会自动获取内部锁，这时候其他线程访问该同步代码块时会被阻塞挂起。拿到内部锁的线程会在正常退出同步代码块或者抛出异常后或者在同步块内调用了该内置锁资源的 wait 系列方法时释放该内置锁(排他锁)。</p></blockquote><blockquote><p>另外，由于 Java 中的线程与操作系统的原生线程一一对应，所以当阻塞一个线城时，需要从用户态切换到内核态执行阻塞操作，这是很耗时的操作，而 synchronized 的使用就会导致上下文切换。</p></blockquote><h4 id="5-2-synchronized-的内存语义"><a href="#5-2-synchronized-的内存语义" class="headerlink" title="5.2 synchronized 的内存语义"></a>5.2 synchronized 的内存语义</h4><p>进入 synchronized 块的语义是把在 synchronized 块内使用到的变量从线程的工作内存中清除，这样在 synchronized 块内使用该变量时就不会从线程的工作内存中获取，而是直接从主内存中获取。退出 synchronized 块的内存语义是把在 synchronized 块内对内存共享变量的修改刷新到主内存。</p><blockquote><p>这也是加锁和释放锁的语义，当获取锁后会清空锁块内本地内存中将会被用到的共享变量，在使用这些共享变量时从内存进行加载，在释放时将本地内存中修改的共享变量刷新到主内存。</p></blockquote><blockquote><p>除可以解决共享变量内存可见性问题外，synchronized 经常被用来实现原子性操作。另外请注意，synchronized 关键字会引起线程上下文切换带来的线程调度开销。</p></blockquote><h3 id="6-Java-中的-volatile-关键字"><a href="#6-Java-中的-volatile-关键字" class="headerlink" title="6.Java 中的 volatile 关键字"></a>6.Java 中的 volatile 关键字</h3><p>volatile关键字可以确保对一个变量的更新对其他线程马上可见，当一个变量被声明为 volatile 时，线程在写入变量时不会把值缓存在寄存器或者其他地方，而是会把值刷新回主内存。</p><blockquote><p>volatile 的内存语义和 synchronized 有相似之处，集体来说就是：当线程写入了 volatile 变量值时就等价于线程退出 synchronized 同步块 (把写入工作内存的变量值同步到主内存)，读取 volatile 变量值时就相当于进入同步块 (先清空本地内存变量值，再从主内存获取最新值)。</p></blockquote><blockquote><p>volatile 虽然提供了可见性保证，但并不保证操作的原子性。</p></blockquote><p>什么时候才使用 volatile 关键字：</p><ul><li>写入变量不依赖变量的当前值时。<blockquote><p>因为如果依赖当前值，将是获取–计算–写入三步操作，这三步操作不是原子性的，而 volitile 不保证原子性。</p></blockquote></li><li>读写变量值时没有加锁。<blockquote><p>因为加锁本身已经保证了内存可见性，这时候不需要把变量声明为 volitile 的。</p></blockquote></li></ul><h3 id="7-Java-中的原子性操作"><a href="#7-Java-中的原子性操作" class="headerlink" title="7.Java 中的原子性操作"></a>7.Java 中的原子性操作</h3><p>所谓原子性操作，是指执行一系列操作时，这些操作要么全部执行，要么全部不执行，不存在只执行其中一部分的情况。</p><h3 id="8-Java-中的-CAS-操作"><a href="#8-Java-中的-CAS-操作" class="headerlink" title="8.Java 中的 CAS 操作"></a>8.Java 中的 CAS 操作</h3><p>CAS 即 Compare and Swap，其实是 JDK 提供的非阻塞原子性操作，它通过硬件保证了比较–更新操作的原子性。JDK 里面的 Unsafe 类提供了一系列的 compareAndSwap* 方法，我们以 compareAndSwapLong 方法进行简单介绍。</p><ul><li>boolean compareAndSwapLong(Object obj, long valueOffeset, long expect, long update) 方法：其中四个参数分别是内存位置、对象中的变量的偏移量、变量预期值和新的值。其操作含义是，如果对象 obj 中内存偏移量为 valueOffset 的变量值为 expect，则使用新的值 update 替换旧的值 expect。</li></ul><h3 id="9-Unsafe-类"><a href="#9-Unsafe-类" class="headerlink" title="9.Unsafe 类"></a>9.Unsafe 类</h3><h4 id="9-1-Unsafe-类中的重要方法"><a href="#9-1-Unsafe-类中的重要方法" class="headerlink" title="9.1 Unsafe 类中的重要方法"></a>9.1 Unsafe 类中的重要方法</h4><p>JDK 的 rt.jar 包中的 Unsafe 类提供了硬件级别的原子性操作，Unsafe 类中的方法都是 native 方法，它们使用 JNI 的方式访问本地 C++ 实现库。</p><p>Usafe 提供的几个主要的方法：</p><ul><li><strong>long objectFieldOffset(Field field) 方法：</strong>返回指定的变量在所属类中的内存地址，改偏移地址仅仅在该 Unsafe 函数中访问指定字段时使用。</li><li><strong>int arrayBaseOffset(Class arrayClase) 方法：</strong>获取数组中第一个元素的地址。</li><li><strong>int arrayIndexScale(Class arrayClass) 方法：</strong>获取数组中一个元素占用的字节。</li><li><strong>boolean compareAndSwapLong(Object obj, long offset, long expect, long update) 方法：</strong>比较对象 obj 中偏移量为 offset 的变量的值是否与 expect 相等，相等则使用 update 值更新，然后返回 true，否则返回 false。</li><li><strong>public native long getLongVolatile(Object obj, long offse) 方法：</strong>获取对象 obj 中偏移量为 offset 的变量对应 volatile 语义的值。</li><li><strong>void putLongVolatile(Object obj, long offset, long value) 方法：</strong>设置 obj 对象中 offset 偏移的类型为 long 的 field 的值为 value，支持 volatile 语义。</li><li><strong>void putOrderedLong(Object obj, long offset, long value) 方法：</strong>设置 obj 对象中 offset 偏移地址对应的 long 型 field 的值为 value。这是一个有延迟的方法，并且不保证值修改对其他线程立即可见。只有在变量使用 volatile 修饰并且预计会被意外修改时才使用该方法。</li><li><strong>void park(boolean isAbsolute, long time) 方法：</strong>阻塞当前线程，其中参数 isAbsolute 等于 false 且 time 等于 0 表示一直阻塞。time 大于 0 表示等待指定的 time 后阻塞线程会被唤醒，这个 time 是个相对值，是个增量值，也就是相对当前时间累加 time 后当前线程会被唤醒。如果 isAbsolute 等于 true，并且 time 大于 0，则表示阻塞的线程到指定的时间点后会被唤醒，这里 time 是个绝对时间，是将某个时间点换算为 ms 后的值。另外，当其他线程调用了当前阻塞线程的 interrupt 方法而中断了当前线程时，当前线程也会返回，而其他线程调用了 unPark 方法并且把当前线程作为参数时当前线程也会返回。</li><li><strong>void unpark(Object thread) 方法：</strong>唤醒调用 park 后阻塞的线程。</li></ul><p>下面是 JDK8 新增的函数，这里只列出 Long 类型操作。</p><ul><li><strong>long getAndSetLong(Object obj, long offset, long update) 方法：</strong>获取对象 obj 中偏移量为 offset 的变量 volatile 语义的当前值，并设置变量 volatile 语义的值为 update。</li><li><strong>long getAndAddLong(Object obj, long offset, long addValue) 方法：</strong>获取对象 obj 中偏移量为 offset 的变量 volatile 语义的当前值，并设置变量值为(原始值 + addValue)。</li></ul><h4 id="9-2-如何使用-Unsafe-类"><a href="#9-2-如何使用-Unsafe-类" class="headerlink" title="9.2 如何使用 Unsafe 类"></a>9.2 如何使用 Unsafe 类</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUnSafe</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Unsafe unsafe;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> stateOffset;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">static</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            unsafe = (Unsafe) field.get(<span class="hljs-literal">null</span>);<br><br>            stateOffset = unsafe.objectFieldOffset(TestUnSafe.class.getDeclaredField(<span class="hljs-string">&quot;state&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            System.out.println(ex.getLocalizedMessage());<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(ex);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TestUnSafe</span> <span class="hljs-variable">testUnSafe</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestUnSafe</span>();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> unsafe.compareAndSwapLong(testUnSafe, stateOffset, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        System.out.println(success);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="10-锁的概述"><a href="#10-锁的概述" class="headerlink" title="10.锁的概述"></a>10.锁的概述</h3><h4 id="10-1-乐观锁与悲观锁"><a href="#10-1-乐观锁与悲观锁" class="headerlink" title="10.1 乐观锁与悲观锁"></a>10.1 乐观锁与悲观锁</h4><ul><li><p><strong>乐观锁：</strong>悲观锁指对数据被外界修改持不保守态度，认为数据不会被其他线程修改，所以在数据被处理前不会对数据进行加锁，并在整个数据处理过程中，是数据处于非锁定状态</p><blockquote><p>乐观锁并不会使用数据库提供的锁机制，一般在表中添加 version 字段或者使用业务状态来实现。乐观锁直到提交时才锁定，所以不会产生任何死锁。</p></blockquote></li><li><p><strong>悲观锁：</strong>悲观锁指对数据被外界修改持保守态度，认为数据很容易就会被其他线程修改，所以在数据被处理前先对数据进行加锁，并在整个数据处理过程中，是数据处于锁定状态</p><blockquote><p>悲观锁的实现往往依靠数据库提供的锁机制，即在数据库中，在对数据记录操作前给记录加排它锁。</p></blockquote></li></ul><h4 id="10-2-公平锁与非公平锁"><a href="#10-2-公平锁与非公平锁" class="headerlink" title="10.2 公平锁与非公平锁"></a>10.2 公平锁与非公平锁</h4><ul><li><strong>公平锁：</strong>公平锁表示线程获取锁的顺序是按照线程请求锁的时间早晚决定的，也就是最早请求锁的线程将最早获取到锁。</li><li><strong>非公平锁：</strong>在运行时闯入，也就是先来不一定先得。</li></ul><h4 id="10-3-独占锁与共享锁"><a href="#10-3-独占锁与共享锁" class="headerlink" title="10.3 独占锁与共享锁"></a>10.3 独占锁与共享锁</h4><ul><li><strong>独占锁：</strong>独占锁保证任何时候都只有一个线程能得到锁，ReentrantLock 就是以独占方式实现的。<blockquote><p>独占锁是一种悲观锁，由于每次访问资源都先加上互斥锁，这限制了并发性，因为读操作并不会影响数据的一致性，而独占锁只允许在同一时间有一个线程读取数据，其他线程必须等待当前线程释放锁才能进行读取。</p></blockquote></li><li><strong>共享锁：</strong>可以同时由多个线程持有，例如 ReadWriteLock 读写锁，它允许一个资源可以被多线程同时进行读操作。<br>共享锁是一种乐观锁，它放宽了加锁的条件，允许多个线程同时进行读操作。</li></ul><h4 id="10-4-什么是可重入锁"><a href="#10-4-什么是可重入锁" class="headerlink" title="10.4 什么是可重入锁"></a>10.4 什么是可重入锁</h4><p>可重入锁就是当一个线程获取了锁，可以在一定次数内进入被该锁锁住的代码。</p><h4 id="10-5-自旋锁"><a href="#10-5-自旋锁" class="headerlink" title="10.5 自旋锁"></a>10.5 自旋锁</h4><ul><li><strong>自旋锁：</strong>当前线程在获取锁时，如果发现锁已经被其他线程占有，它不马上阻塞自己，在不放弃 CPU 使用权的情况下，多次尝试获取(默认次数是 10，可以使用 -XX：PreBlockSpinsh 参数设置该值)。<blockquote><p>出现自旋锁的原因：由于 Java 中的线程是与操作系统中的线程一一对应的，所以当一个线程在获取锁(比如独占锁)失败后，会被切换到内核状态而被挂起。当该线程获取到锁时又需要将其切换到内核状态而唤醒该线程。而从用户状态切换到内核状态的开销是比较大的，在一定程度上会影响并发性能。</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java基础知识</category>
      
      <category>多线程学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>并发编程线程基础一</title>
    <link href="/2023/02/15/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AF%87/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
    <url>/2023/02/15/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AF%87/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、并发编程线程基础"><a href="#一、并发编程线程基础" class="headerlink" title="一、并发编程线程基础"></a>一、并发编程线程基础</h2><h3 id="1-什么是进程、线程"><a href="#1-什么是进程、线程" class="headerlink" title="1.什么是进程、线程"></a>1.什么是进程、线程</h3><p>进程是代码在数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，线程则是进程的一个执行路径，一个进程至少有一个线程，进程中的多个线程共享进程的资源。</p><blockquote><p>操作系统在分配资源时是把资源分配给进程的，但是 CPU 资源比较特殊，它是分配到线程的，因为真正要占用 CPU 运行的是线程，所以也说线程是 CPU 分配的基本单位。</p></blockquote><h3 id="2-线程创建的三种方式"><a href="#2-线程创建的三种方式" class="headerlink" title="2.线程创建的三种方式"></a>2.线程创建的三种方式</h3><p>Java 中有线程创建方式，分别为实现 Runnable 接口的 run 方法，继承 Thread 类并重写 run 方法，使用 FutureTask 方式。</p><h4 id="2-1-继承-Thread-类并重写-run-方法"><a href="#2-1-继承-Thread-类并重写-run-方法" class="headerlink" title="2.1 继承 Thread 类并重写 run 方法"></a>2.1 继承 Thread 类并重写 run 方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 其实调用 start 方法后线程并没有马上执行而 处于就 状态， 这个就绪状态是指</span><br><span class="hljs-comment">         * 线程已经获取了除 CPU 资源外的其 资源，等待获取 CPU 资源后才会真正处于运行状态。</span><br><span class="hljs-comment">         * 一旦 run 方法执行完毕， 该线程就处于终止状态</span><br><span class="hljs-comment">         */</span><br>        myThread.start();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;This a thread&#x27;s run method.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-2-实现-Runnable-的-run-方法"><a href="#2-2-实现-Runnable-的-run-方法" class="headerlink" title="2.2 实现 Runnable 的 run 方法"></a>2.2 实现 Runnable 的 run 方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImplementRunnableThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;I&#x27;m a thread run method.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myThread).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myThread).start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-3-使用-FutureTask-方式"><a href="#2-3-使用-FutureTask-方式" class="headerlink" title="2.3 使用 FutureTask 方式"></a>2.3 使用 FutureTask 方式</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FutureTaskThreadDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallerTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;violet&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        FutureTask&lt;String&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;String&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CallerTask</span>()); <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask).start();<br>        <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> futureTask.get();<br>            System.out.println(<span class="hljs-string">&quot;线程执行完成返回结果：&quot;</span> + res);<br>        &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-线程通知与等待"><a href="#3-线程通知与等待" class="headerlink" title="3.线程通知与等待"></a>3.线程通知与等待</h3><p>Java 中的 Object 类是所有类的父类，鉴于继承机制， Java 把所有类都需要的方法放到了 Object 类里面，其中就包含线程通知与等待系列函数。</p><h4 id="3-1-wait-函数"><a href="#3-1-wait-函数" class="headerlink" title="3.1 wait() 函数"></a>3.1 wait() 函数</h4><p>当一个线程调用一个共享变量 wait() 方法时, 该调用线程会被阻塞挂起, 到发生下面几件事情之一才返回:</p><ul><li>其他线程调用了该共享对象 notify() 或者 notifyAll() 方法</li><li>其他线程调用了该线程 interrupt() 方法, 该线程抛出 InterruptedException 异常返回。</li></ul><blockquote><p>如果调用 wait()方法的线程没有事先获取该对象的监视器锁，则调用 wait() 方法时调用 线程会抛出 IllegalMonitorStateExce ption 异常。</p></blockquote><h4 id="3-2-notify-函数"><a href="#3-2-notify-函数" class="headerlink" title="3.2 notify() 函数"></a>3.2 notify() 函数</h4><p>唤醒一个在该共享变量上调用 wait 系列方法后被挂起的线程。</p><h4 id="3-3-notifyAll-函数"><a href="#3-3-notifyAll-函数" class="headerlink" title="3.3 notifyAll() 函数"></a>3.3 notifyAll() 函数</h4><p>唤醒所有在该共享变量上由于调用 wait 系列方法而被挂起的线程。</p><h4 id="3-4等待线程执行终止的-join-方法"><a href="#3-4等待线程执行终止的-join-方法" class="headerlink" title="3.4等待线程执行终止的 join 方法"></a>3.4等待线程执行终止的 join 方法</h4><p>在项目实践中经常会遇到一个场景，就是需要等待某几件事情完成后才能继续往下执行，比如多个线程加载资源，需要等待多个线程全部加载完毕再汇总处理。</p><h4 id="3-5-让线程睡眠的-sleep-方法"><a href="#3-5-让线程睡眠的-sleep-方法" class="headerlink" title="3.5 让线程睡眠的 sleep 方法"></a>3.5 让线程睡眠的 sleep 方法</h4><p>当一个执行中的线程调用了 Thread 的 sleep 方法后，调用线程会暂时让出指定时间的执行权，也就是在这期间不参与 CPU 的调度，但是该线程所拥有的监视器资源，比如锁还是持有不让出的。</p><h4 id="3-6-让出-CPU-执行权的-yield-方法"><a href="#3-6-让出-CPU-执行权的-yield-方法" class="headerlink" title="3.6 让出 CPU 执行权的 yield 方法"></a>3.6 让出 CPU 执行权的 yield 方法</h4><p>Thread 有一个静态的 yield 方法，当一个线程调用 yield 方法时，实际就是在暗示线程调度器当前线程请求让出自己 CPU 使用，但是线程调度器可以无条件忽略这个暗示。</p><h4 id="3-7-线程中断"><a href="#3-7-线程中断" class="headerlink" title="3.7 线程中断"></a>3.7 线程中断</h4><p>Java 中的线程中断是一种线程间的协作模式，通过设置线程的中断标志并不能直接终止该线程的执行，而是被中断的线程根据中断状态自行处理。</p><ul><li><strong>void interrupt()</strong>: 中断线程，例如，当线程 A 运行时，线程 B 可以调用线程 A 的 interrupt() 方法来设置线程 A 的中断标志为 true 并立即返回。设置标志仅仅是设置标志，线程 A 实际并没有被中断，它会继续往下执行。如果线程 A 因为调用了 wait 系列函数、join 方法或者 sleep 方法而被阻塞挂起，这时候若线程 B 调用线程 A 的 interrupt() 方法，线程 A 会在调用这些方法的地方抛出 InterruptedException 异常而返回。</li><li><strong>boolean isInterrupted() 方法</strong>: 检测当前线程是否被中断，如果是返回 true, 否则返回 false。  </li><li><strong>boolean interrupted() 方法</strong>: 检测当前线程是否被中断，如果是返回 true，否则返回 false。与 isInterrupted 不同的是，该方法如果发现当前线程被中断，则会清除中断标志，并且该方法是 static 方法，可以通过 Thread 类直接调用。另外从下面给的代码可以知道，在 interrupted() 内部是获取当前调用线程的中断标志而不是调用 interrupted() 方法的实例对象的中断标志。</li></ul><h4 id="3-8-理解线程上下文切换"><a href="#3-8-理解线程上下文切换" class="headerlink" title="3.8 理解线程上下文切换"></a>3.8 理解线程上下文切换</h4><p>当前线程使用完时间片后，就会处于就绪状态并让出 CPU 让其他线程占有，这就是上下文切换。</p><blockquote><p>线程上下文切换时机有：当前线程的 CPU 时间片使用完处于就绪状态时，当前线程被其他线程中断时。</p></blockquote><h4 id="3-9-线程死锁"><a href="#3-9-线程死锁" class="headerlink" title="3.9 线程死锁"></a>3.9 线程死锁</h4><h5 id="3-9-1-什么是线程死锁"><a href="#3-9-1-什么是线程死锁" class="headerlink" title="3.9.1 什么是线程死锁"></a>3.9.1 什么是线程死锁</h5><p>死锁是指两个或两个以上的线程在执行任务过程中，因争夺资源而造成的互相等待的现象。</p><h5 id="3-9-2-死锁产生的必要条件"><a href="#3-9-2-死锁产生的必要条件" class="headerlink" title="3.9.2 死锁产生的必要条件"></a>3.9.2 死锁产生的必要条件</h5><ul><li><p>互斥条件：指线程对已经获取到的资源进行排它性使用，即该资源同时只由一个线程占用。如果此时还有其他线程请求获取该资源，则请求者只能等待，直至占有资源的线程释放该资源。</p></li><li><p>请求并持有条件：指一个线程已经持有了至少一个资源，但又提出了新的资源请求，而新资源已被其他线程占有，所有当前线程会被阻塞，但阻塞的同时并不释放自己已经获取的资源。</p></li><li><p>不可剥夺条件：指线程获取到的资源在自己使用完之前不能被其他线程抢占，只有在自己使用完毕后才由自己释放该资源。</p></li><li><p>环路等待条件：指在发生死锁时，必然存在一个线程–资源的环形链，即线程集合{T0，T1，T2，···，Tn}中的 T0 正在等待一个 T1 占用的资源，T1 正在等待 T2 占用的资源，······Tn 正在等待已被 T0 占用的资源。</p></li></ul><h5 id="3-9-3-如何避免线程死锁"><a href="#3-9-3-如何避免线程死锁" class="headerlink" title="3.9.3 如何避免线程死锁"></a>3.9.3 如何避免线程死锁</h5><p>要想避免死锁，只需要破坏掉至少一个构造死锁的必要条件即可，但是学过操作系统的读者应该都知道，目前只有请求并持有和环路等待条件是可以被破坏的。</p><h4 id="3-10-守护线程与用户线程"><a href="#3-10-守护线程与用户线程" class="headerlink" title="3.10 守护线程与用户线程"></a>3.10 守护线程与用户线程</h4><p>守护线程是为用户线程服务的，当一个程序中的所有用户线程都执行完成之后程序就会结束运行，程序结束运行时不会管守护线程是否正在运行。</p><blockquote><p>即使是守护线程，当程序中调用 join() 方法时，程序依然会等待守护线程执行完成之后再结束进程。</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>《Java并发编程之美》</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java基础知识</category>
      
      <category>多线程学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计原则</title>
    <link href="/2023/02/14/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <url>/2023/02/14/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<ul><li><p>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</p><blockquote><p>把会变化的部分取出并 “封装” 起来，好让其他部分不会受到影响。</p></blockquote></li><li><p>针对接口编程，而不是针对实现编程。</p><blockquote><p>类的行为将被放在分开的类中，此类专门提供某行为接口的实现，这样就不需要知道类具体的实现细节。</p></blockquote></li><li><p>多用组合，少用继承。</p><blockquote><p>使用组合建立系统具有很大的弹性，不仅可以将算法族封装成类，更可以 “在运行时动态的改变行为”，只要组合的行为对象符合正确的接口标准即可。</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>理论知识</category>
      
      <category>设计模式</category>
      
      <category>设计原则</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计原则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习过程中陌生的单词</title>
    <link href="/2023/02/14/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%99%8C%E7%94%9F%E7%9A%84%E5%8D%95%E8%AF%8D/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%99%8C%E7%94%9F%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
    <url>/2023/02/14/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%99%8C%E7%94%9F%E7%9A%84%E5%8D%95%E8%AF%8D/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%99%8C%E7%94%9F%E7%9A%84%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<ul><li>decoy：n.诱饵 v.引诱</li><li>differ：vi.不同</li><li>counterpart：n.对应方; 职位(或作用)相当的人</li><li>independent: adj.独立的</li><li>typical：adj.典型的</li><li>assign: vt.分派；委派</li><li>invoke：vt.提出；调用</li><li>subsequent: adj.后来的; 随后的;</li><li>implicit: adj.含蓄的，无疑问的</li><li>as long as：只要；和…一样长</li><li>access：n.通道；vt.访问，到达</li><li>subject：n.主题；vt.使…臣服；adj.可能受…的影响</li><li>garbage：n.(生活)垃圾；垃圾桶</li><li>probe：v.探查；追问；n.探究</li><li>linear：adj.线性的，直线的</li><li>inheritable: adj.可遗传的</li><li>custom：n.风俗，习性；adj.定做的</li><li>collision：n.碰撞；（两人之间或对立意见、看法等之间的）冲突</li><li>eliminate：vt.消除，排除</li><li>consecutive：adj.连续的</li><li>behave：v.表现，举止</li><li>sequential：adj.连续的，按次序的；</li><li>optimal：adj.最优的，最佳的</li><li>multiplicative：n.乘法；adj.增加的；倍增的</li><li>in which：在其中；在…其中；</li><li>anonymous：adj.匿名的</li><li>threshold：n.门槛，阈，界</li><li>expunge：vt.消除，消去</li><li>stale: adj.陈腐的；不新鲜的；n.(牛马、骆驼)尿；vt.使陈旧</li><li>solely：adv.唯一地；仅；只；</li><li>concurrent: adj.同时发生的; n.共存物</li><li>priority：n.优先；优先权</li><li>allocate: vt.分配</li><li>prime: adj.首要的；n.盛年；</li><li>purpose：n.意图；目的；vt.有意；打算</li><li>pertain：vi.适合</li><li>indicate：v.表明；暗示</li><li>hint: n.暗示；征兆；v.暗示</li><li>yield：n.产量；利润；v.屈服；提供</li><li>heuristic：adj.(教学或教育)启发式的</li><li>improve：v.改善；改进</li><li>relative：adj.相对的；比较的；n.亲戚；亲属；同类事物</li><li>otherwise：否则</li><li>utilise：vt.利用；使用</li><li>combine：v.结合；联合；n.集团</li><li>profile: n.简介；概述；vt.概述</li><li>benchmark: n.基准；vt.检测(用基准问题测试)</li><li>appropriate：适合的；恰当的；vt.盗用；挪用；占用</li><li>reproduce：v.复制；繁殖；</li><li>specify：vt.具体说明；详述</li><li>precision：n.精确；细致；adj.精确的；</li><li>accuracy：n.精确(程度)；准确(性)</li><li>ownership：n.所有权</li><li>negative：adj.消极的；负面的；n.否定；vt.否定；拒绝</li><li>supply：n.供给；供应；v.提供</li><li>persistent：adj.执着的；不屈不挠的</li><li>conceptual：adj.概念(上)的；</li><li>isolate：v.使隔离 n.孤僻者 adj.孤僻的</li><li>internal: adj.里面的，内部的；n.内脏，本质</li><li>encounter：vt.遭遇</li><li>contention：n.争吵；争论</li><li>particular：adj.特别的；n.细节；详情</li><li>appropriate：adj.适当的，合适的</li><li>parallel：adj.平行的，并行的；</li><li>Usage：n.(词语的)用法；惯用法</li><li>accident：n.意外</li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>单词学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单词学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>行为型模式-策略模式</title>
    <link href="/2023/02/14/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/02/14/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、-定义"><a href="#一、-定义" class="headerlink" title="一、 定义"></a>一、 定义</h2><p>策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>理论知识</category>
      
      <category>设计模式</category>
      
      <category>行为型模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式学习方法</title>
    <link href="/2023/02/14/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    <url>/2023/02/14/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="让大脑就范的方法"><a href="#让大脑就范的方法" class="headerlink" title="让大脑就范的方法"></a>让大脑就范的方法</h2><ul><li>慢一点，你理解的越多，记得就越少</li><li>勤做练习，自己做笔记</li><li>阅读 “There are no Dumb Questions” 部分</li><li>上床睡觉前不要再看别的书本了，或至少不再看其它有难度的东西</li><li>要喝水，而且要多喝水</li><li>大声说出来</li><li>听听你的大脑怎么说</li><li>要有点感觉</li><li>设计一些东西</li></ul><p>参考《HEAD FIRST设计模式 （中文版）》</p>]]></content>
    
    
    <categories>
      
      <category>理论知识</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
