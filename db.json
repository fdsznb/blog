{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"340499890fcdfc2fcb03e125ef0962f7462fe87c","modified":1675649851469},{"_id":"source/_posts/未完成的事情.md","hash":"3b9e1da9ba60c1b5bb526d1c72e3fc43ba2b84b3","modified":1677034837512},{"_id":"source/_posts/acwing/算法基础课/基础算法.md","hash":"45ed0dceba44aee4beee48b72a859e269dad4015","modified":1677138451950},{"_id":"source/_posts/Java基础知识/多线程/多线程学习篇/并发编程线程基础一.md","hash":"9669c940ea4f78f72a02d20e2a697eb2c8eee282","modified":1676953221949},{"_id":"source/_posts/理论知识/设计模式/设计模式学习方法.md","hash":"6da4e7f9f1fd3b960584506cb4af68b565668dcb","modified":1676534675994},{"_id":"source/_posts/Java基础知识/多线程/学习过程中陌生的单词/学习过程中陌生的单词.md","hash":"4f089c0fcb2c6630398244ea448a3a50809f6bfb","modified":1677035989485},{"_id":"source/_posts/理论知识/设计模式/行为型模式/设计模式.md","hash":"e0b4bef2994eb754031fa8f6a4dc4c6357652433","modified":1676534644240},{"_id":"source/_posts/理论知识/设计模式/设计原则/设计原则.md","hash":"74cb13b17680377313ae99de021eacb192c78760","modified":1676534658511},{"_id":"source/_posts/Java基础知识/多线程/多线程学习篇/并发编程线程基础二.md","hash":"a577dc55be4922e383ded43e8a7d4aca8ee418ec","modified":1676858607786},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675649851484},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675649851484},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1675649851470},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1675649851470},{"_id":"themes/fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1675649851471},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1675649851470},{"_id":"themes/fluid/_config.yml","hash":"3452f1b187ac26fef819f9bab071c83bf8efe676","modified":1676625011740},{"_id":"themes/fluid/package.json","hash":"40e3a3fea5dedbc09e859a2ea6ce271004a57e87","modified":1675649851477},{"_id":"themes/fluid/languages/eo.yml","hash":"2c1c481d9af116e79fe55a0aa0bdbb143a97f559","modified":1675649851472},{"_id":"themes/fluid/languages/de.yml","hash":"288f649c2c2314eb610693b18853ee74f0541e87","modified":1675649851472},{"_id":"themes/fluid/languages/en.yml","hash":"31f2867619a768606166778d4ee51f3d00ac33a0","modified":1675649851472},{"_id":"themes/fluid/languages/ja.yml","hash":"dc43be11a300893ebef47283c22f2f946ca21260","modified":1675649851472},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"de9b7e729d72eee9327671c3d5df0a607c4c3257","modified":1675649851472},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"3b92f4428d66c31610f6cde13b82ee723aff00d2","modified":1675649851472},{"_id":"themes/fluid/layout/404.ejs","hash":"79a598e43c40d48b23076361720f1e77df466e41","modified":1675649851472},{"_id":"themes/fluid/layout/about.ejs","hash":"5b6de01c82b14834ab1e67f0a803612f5855f064","modified":1675649851476},{"_id":"themes/fluid/layout/archive.ejs","hash":"7a1e19dec37804927f0d331d7e6c80ed03becd61","modified":1675649851476},{"_id":"themes/fluid/layout/categories.ejs","hash":"e7733779366ff6402615d96d4195f1196fa8351d","modified":1675649851477},{"_id":"themes/fluid/LICENSE","hash":"694fb3659a4331dd752bd92e4248623bff8617cd","modified":1675649851471},{"_id":"themes/fluid/layout/category.ejs","hash":"dd2bd15cbd811d6ea973b6e6a17d99e36151e274","modified":1675649851477},{"_id":"themes/fluid/layout/index.ejs","hash":"bd118b6f7bd882a2ff896a1c4bc7bfa1c7694568","modified":1675649851477},{"_id":"themes/fluid/layout/layout.ejs","hash":"a1cea9b8fe0954d5a8d89941404f31ac344a4f5b","modified":1675649851477},{"_id":"themes/fluid/layout/links.ejs","hash":"76807f949aaa20983b89efc9e6bc39108d022ac3","modified":1675649851477},{"_id":"themes/fluid/layout/page.ejs","hash":"f867e69e563b8ad83054714f73d9173ea050d93b","modified":1675649851477},{"_id":"themes/fluid/layout/post.ejs","hash":"edfeb655895027d15334d009324d27a29926cc94","modified":1675649851477},{"_id":"themes/fluid/layout/tag.ejs","hash":"3a9296eb7181e8b3fb0cdc60cbafc815b98d6f51","modified":1675649851477},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1675649851477},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"beb3474d6f65c1e56700ba872c6a0d0836d4168e","modified":1675649851471},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1675649851471},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1675649851471},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1675649851471},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"780117f8032df3b52169a387658a13cc025a0e13","modified":1675649851473},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"904971bf3419bec46de416c27dceb39a73063f33","modified":1675649851473},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"78ce211415d502c5a4398d786d5c697d34d868b9","modified":1675649851471},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"a137110fe5c4c13eb189dc53fe270c0d390a97e0","modified":1675649851474},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1675649851471},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"9af7ff960a421933169162ea1a2cd7e7577b0ed7","modified":1675649851474},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"b7d5b438e2eeb624aecd86f3b321466834deac11","modified":1675649851474},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"18381d03518526d7cefd024a0bdd8d9e7c6440f5","modified":1675649851471},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"2af4653ed3fefdbcb12c16a6d2fa166d14672845","modified":1675649851474},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1675649851475},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"010b8b5ff2d1ae178cfba83a6c95d6345b053617","modified":1675649851475},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"00cdbf4c5e25a7f0c461ef460ae1af28c29e4712","modified":1675649851475},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"bea21f1b5de61badd6c068080315c201fc80bc36","modified":1675649851476},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"a70c26e415a27f07f38b9384e7eb48d1f2b30328","modified":1675649851476},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"76e6bc368cf46d4103ea9514699e10ec0b9a4b56","modified":1675649851476},{"_id":"themes/fluid/scripts/events/index.js","hash":"91defe82d50a317903411f0b260da0f140f43dc4","modified":1675649851478},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1675649851479},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"cb72e5acfba882a6eacd6cae8db3238bb078737a","modified":1675649851479},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1675649851479},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1675649851479},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"a26549407de10b994d1f6e37ba8fecf9dd4622de","modified":1675649851479},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1675649851479},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1675649851479},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"b6ccfffdee010ebd60cd8cc2386c43db076b6ca1","modified":1675649851479},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"9c01393f446c490c56b6b0d482aaa8d97cc8b717","modified":1675649851479},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"dac0e08eaa3614a6fd9ddbdfb4584094b1bdb30a","modified":1675649851480},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1675649851480},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1675649851480},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1675649851480},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1675649851480},{"_id":"themes/fluid/scripts/tags/note.js","hash":"8020acc2c4bb3a2054e3cb349fac7cd10b79a0be","modified":1675649851480},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1675649851480},{"_id":"themes/fluid/scripts/utils/object.js","hash":"d798779ec79a53ce04b8ac79efd5d064981d95bd","modified":1675649851480},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1675649851480},{"_id":"themes/fluid/source/css/main.styl","hash":"bf536db598434c36cc0c752196bfde46e584a92e","modified":1675649851485},{"_id":"themes/fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1675649851485},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1675649851485},{"_id":"themes/fluid/source/js/boot.js","hash":"5264c0d2eb73b4948ee6bcb1bd847a924d906088","modified":1675649851488},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1675649851488},{"_id":"themes/fluid/source/js/color-schema.js","hash":"719296a8b6e1b76ec682554fb3dbcc75a2a2d78d","modified":1675649851489},{"_id":"themes/fluid/source/js/events.js","hash":"b019f58951cc02c5fd1863e2e05101254bf2896c","modified":1675649851489},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1675649851488},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1675649851489},{"_id":"themes/fluid/source/js/local-search.js","hash":"90d7eb35aff2994fa173abeed7ce0c91357f5979","modified":1675649851489},{"_id":"themes/fluid/source/js/plugins.js","hash":"75b1d3e58fdfc5230608a0f7d116e41c93050cef","modified":1675649851490},{"_id":"themes/fluid/source/js/leancloud.js","hash":"9115c754794bfd20e84b61f3beb1ec37773b4c0c","modified":1675649851489},{"_id":"themes/fluid/source/js/utils.js","hash":"a2da89bb185fcd9de7a834e862b03548f5efcd04","modified":1675649851490},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1675649851490},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1675649851473},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1675649851473},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1675649851473},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1675649851473},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1675649851473},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1675649851473},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"93d47bc528bf1a3d0fe950fc21a2da787e1b7dc9","modified":1675649851474},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"d1e86754c9560f7346200b2aa9a7f715a3fac82b","modified":1675649851474},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"bd2b8843094966dbc96c3768b4858c6e241a59a9","modified":1675649851474},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"d81bfb2f594d597f0e176abc09a76f3f58b98c2e","modified":1675649851474},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"d20f54bf2fd5cd274b4b9c5542eafbfec5120838","modified":1675649851475},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"80cdaa9da8770568af5bb06a66829dddf1d683d2","modified":1675649851475},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"fd1f78287c868ccab78b6244b66e3f9b0968c4a8","modified":1675649851475},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1675649851475},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"842da2fc1c99a3fb887b5e36b76625c9a1b3401a","modified":1675649851475},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"13d8466cd4c98367131b5f3d6a30b3d4ce8de26f","modified":1675649851478},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"c0da20f9adca2761d370cc6dda013ec1ecbb7710","modified":1675649851478},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"b4148d2283431a2edd5d04bbfcebd76941254476","modified":1675649851478},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"af80de29f06b4f64c31fe070a2af292876717ee1","modified":1675649851478},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1675649851478},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"3f2dba4959b27466521de97eff692815650c02b7","modified":1675649851478},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1675649851481},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1675649851481},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1675649851485},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"35179cd560f9919376abdcf99e0d23f20e18e84f","modified":1675649851485},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"86926a80bf6f39a7f47789b1a8f44b5984b4683f","modified":1675649851481},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1675649851481},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"0d6d39709999c8e1786ed64c6f5bbdc4acd21813","modified":1675649851483},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"ed0f3aae95edac702ed497f6e8a76b33f39f8c89","modified":1675649851483},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"6f2a3b8af2793dd831f661c6db0ccbe0a62ccc48","modified":1675649851483},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1675649851483},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"67103d8eb96cd94d185c00011b809eecdb88823a","modified":1675649851483},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"0924e35eff2ec84e2d9e4772abccda452d9463ef","modified":1675649851484},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"4123f77c742d94e903f7196350c830cbccf8669a","modified":1675649851484},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"2eaac14a1af09cf6a1ab24201e182ac2aca40385","modified":1675649851484},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"cd81947721c5aecc1cc8d4658599837701ef8af3","modified":1675649851484},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"10fcf4291b6efd5036214b7dde57ed2e3878fc1a","modified":1675649851484},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1675649851485},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"da823846f0896f16b21c7430f047f7222a89cd10","modified":1675649851481},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"bb9cdde191b9b1287ba19414bab862f30be6a8a0","modified":1675649851482},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"c398892fba1494dd6fd417415076458ed321d34d","modified":1675649851482},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e77f5c5d5da17a7e6241cca0e1d4e8cd07169c64","modified":1675649851482},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1675649851482},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1675649851483},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1675649851483},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"f770c5c3ee89421e9e3f1313ca5bd07a2448f400","modified":1675649851482},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e568f308df26465e0432197e8b57384707470f54","modified":1675649851483},{"_id":"themes/fluid/source/img/default.png","hash":"1eec8e152fbfcc661dc7eeb354498e6b2b88f64e","modified":1675649851487},{"_id":"themes/fluid/source/img/favicon.png","hash":"2aa1743dc823866820bdcd1bfca35efa235dd6ad","modified":1675649851488},{"_id":"public/local-search.xml","hash":"177348a1e0a514ba42a6a7b1ce7bea3459e3f375","modified":1677138513154},{"_id":"public/2099/02/16/未完成的事情/index.html","hash":"09fad6212b397d2dfc132be6bee280a6cb6d9f6c","modified":1677138513154},{"_id":"public/2023/02/14/理论知识/设计模式/设计原则/设计原则/index.html","hash":"11794d2b52a5d63448c54f299aea91419ffc079c","modified":1677138513154},{"_id":"public/2023/02/14/Java基础知识/多线程/学习过程中陌生的单词/学习过程中陌生的单词/index.html","hash":"27c2f68f704f29ce23e428aff6a6872211a33d4e","modified":1677138513154},{"_id":"public/2023/02/14/理论知识/设计模式/行为型模式/设计模式/index.html","hash":"017058f8c0d8e59c509356e2e527fd9f6b8769fa","modified":1677138513154},{"_id":"public/2023/02/14/理论知识/设计模式/设计模式学习方法/index.html","hash":"50b1ad7cdb899c6ea0acc38bde7163ea5983ba50","modified":1677138513154},{"_id":"public/archives/index.html","hash":"5e398f336458e2e4132efb96a8c2ec737c430aa2","modified":1677138513154},{"_id":"public/archives/2023/index.html","hash":"abd2a844e6fcc89f6e64d4c9076512286e7985e7","modified":1677138513154},{"_id":"public/archives/2023/02/index.html","hash":"cd0ce8360bf3f64cce37d5f1a31a5c1f7fc52a9f","modified":1677138513154},{"_id":"public/archives/2099/index.html","hash":"e30536c04fb3d25ef3ff8e7fdb7d4db8044202db","modified":1677138513154},{"_id":"public/archives/2099/02/index.html","hash":"8fc622ab680aa3b44db571f4edb835c778508d6f","modified":1677138513154},{"_id":"public/categories/acwing/index.html","hash":"f90f76c7799b30224558d18573447aa8aec4158b","modified":1677138513154},{"_id":"public/categories/Java基础知识/index.html","hash":"15a5bff24967c7a8794637631f2c6fc2a3921f05","modified":1677138513154},{"_id":"public/categories/理论知识/index.html","hash":"2de31b77779537e66c457f7facf498f1bb9eb8d9","modified":1677138513154},{"_id":"public/categories/acwing/算法基础课/index.html","hash":"4c097fd61f3ae76d30d74ca4db9277bef28e1530","modified":1677138513154},{"_id":"public/categories/单词学习/index.html","hash":"c3967bc2bb6d4214d95c01abba009fecfe968aba","modified":1677138513154},{"_id":"public/categories/Java基础知识/多线程学习/index.html","hash":"a0743abf5f63833228e6eb46374c3d702ab0722a","modified":1677138513154},{"_id":"public/categories/理论知识/设计模式/index.html","hash":"8dd86d0e87109e2c469eac38e692d78b3050cc5f","modified":1677138513154},{"_id":"public/categories/理论知识/设计模式/行为型模式/index.html","hash":"438d27ff995ea70b7195fd2137fc53475395d998","modified":1677138513154},{"_id":"public/categories/理论知识/设计模式/设计原则/index.html","hash":"cd1af109bb95e4e775607b090b17f852ab61890c","modified":1677138513154},{"_id":"public/tags/设计模式/index.html","hash":"67c4cac75350a77fa120a1e9d238d88ece5e646e","modified":1677138513154},{"_id":"public/tags/单词学习/index.html","hash":"b39645fe10267b618df18fdc604a9aae9d050799","modified":1677138513154},{"_id":"public/tags/设计原则/index.html","hash":"7cf1e64738c8ea0a604ed19eff3f43042e4f6c51","modified":1677138513154},{"_id":"public/404.html","hash":"d6c6677013b5210d149befc0cc17cfbb5313e264","modified":1677138513154},{"_id":"public/tags/index.html","hash":"22f35fedb05c3eba6a1528bb6a38a44e4a891982","modified":1677138513154},{"_id":"public/links/index.html","hash":"6e5c47d3d7949023aa1b8e9fd9e34325551b7fc1","modified":1677138513154},{"_id":"public/2023/02/23/acwing/算法基础课/基础算法/index.html","hash":"841be546a50e11f0830c1cbd3287c92cea9c14b7","modified":1677138513154},{"_id":"public/2023/02/17/Java基础知识/多线程/多线程学习篇/并发编程线程基础二/index.html","hash":"e5c4893c17c66e4fc98e53c7c94dcb94cade8b0c","modified":1677138513154},{"_id":"public/2023/02/15/Java基础知识/多线程/多线程学习篇/并发编程线程基础一/index.html","hash":"39a8b21029db5b6cb642bfcbad4e7b1856282c28","modified":1677138513154},{"_id":"public/index.html","hash":"50be2cb3c922ac8b2318e1b6988c6e64b9458e76","modified":1677138513154},{"_id":"public/categories/index.html","hash":"b12a92bd6e075a0e3fcb5f1b736dc0645a8b20e2","modified":1677138513154},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1677138513154},{"_id":"public/CNAME","hash":"340499890fcdfc2fcb03e125ef0962f7462fe87c","modified":1677138513154},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1677138513154},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1677138513154},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1677138513154},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1677138513154},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1677138513154},{"_id":"public/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1677138513154},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1677138513154},{"_id":"public/js/events.js","hash":"41632930eca3e763cc1cf2de0b521e602dc72152","modified":1677138513154},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1677138513154},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1677138513154},{"_id":"public/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1677138513154},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1677138513154},{"_id":"public/css/main.css","hash":"9487432febfab1b5440bfb31c1d0bcdd07268710","modified":1677138513154},{"_id":"public/img/default.png","hash":"1eec8e152fbfcc661dc7eeb354498e6b2b88f64e","modified":1677138513154},{"_id":"public/img/favicon.png","hash":"2aa1743dc823866820bdcd1bfca35efa235dd6ad","modified":1677138513154}],"Category":[{"name":"acwing","_id":"clegsyv7e0003hwtvcw7c84bw"},{"name":"Java基础知识","_id":"clegsyv7o0008hwtv49b4fuun"},{"name":"理论知识","_id":"clegsyv7r000chwtvd9vo408s"},{"name":"算法基础课","parent":"clegsyv7e0003hwtvcw7c84bw","_id":"clegsyv7t000ihwtv45fz56yu"},{"name":"单词学习","_id":"clegsyv7u000khwtveb4t616o"},{"name":"多线程学习","parent":"clegsyv7o0008hwtv49b4fuun","_id":"clegsyv7v000ohwtv2ujn7qe3"},{"name":"设计模式","parent":"clegsyv7r000chwtvd9vo408s","_id":"clegsyv7x000rhwtv3wiegti2"},{"name":"行为型模式","parent":"clegsyv7x000rhwtv3wiegti2","_id":"clegsyv7z0011hwtvgig81az6"},{"name":"设计原则","parent":"clegsyv7x000rhwtv3wiegti2","_id":"clegsyv7z0012hwtv6fqld79u"}],"Data":[],"Page":[],"Post":[{"title":"未完成的事情","date":"2099-02-16T08:33:23.000Z","description":null,"_content":"\n### 最重要的事\n1. 算法\n2. Java 多线程、虚拟机\n3. 分布式基础\n\n\n\n\n* Acwing：算法基础, 算法提高课, 算法进阶课\n* 理论：分布式，CAP，BASE，设计模式\n* 基础：计算机体系结构，计算机网络，操作系统，计算机组成原理，编译原理\n* Java：多线程，集合，IO，JVM 虚拟机\n* 框架：Spring，Spring MVC，Spring Boot,Spring Cloud，Netty\n* 中间件：ZooKeeper，Redis，RabbitMQ，Rocket MQ，Kafka，Dubbo\n* 数据库：MySQL，MongDB，Elasticsearch\n* 容器：Docker，K8S\n\n* 音乐：乐理知识，和声学习，汤1---汤5，流行歌曲部分伴奏。","source":"_posts/未完成的事情.md","raw":"---\ntitle: 未完成的事情\ncategories: []\ndate: 2099-02-16 16:33:23\ntags:\ndescription:\n---\n\n### 最重要的事\n1. 算法\n2. Java 多线程、虚拟机\n3. 分布式基础\n\n\n\n\n* Acwing：算法基础, 算法提高课, 算法进阶课\n* 理论：分布式，CAP，BASE，设计模式\n* 基础：计算机体系结构，计算机网络，操作系统，计算机组成原理，编译原理\n* Java：多线程，集合，IO，JVM 虚拟机\n* 框架：Spring，Spring MVC，Spring Boot,Spring Cloud，Netty\n* 中间件：ZooKeeper，Redis，RabbitMQ，Rocket MQ，Kafka，Dubbo\n* 数据库：MySQL，MongDB，Elasticsearch\n* 容器：Docker，K8S\n\n* 音乐：乐理知识，和声学习，汤1---汤5，流行歌曲部分伴奏。","slug":"未完成的事情","published":1,"updated":"2023-02-22T03:00:37.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clegsyv730000hwtva9p8875x","content":"<h3 id=\"最重要的事\"><a href=\"#最重要的事\" class=\"headerlink\" title=\"最重要的事\"></a>最重要的事</h3><ol>\n<li>算法</li>\n<li>Java 多线程、虚拟机</li>\n<li>分布式基础</li>\n</ol>\n<ul>\n<li><p>Acwing：算法基础, 算法提高课, 算法进阶课</p>\n</li>\n<li><p>理论：分布式，CAP，BASE，设计模式</p>\n</li>\n<li><p>基础：计算机体系结构，计算机网络，操作系统，计算机组成原理，编译原理</p>\n</li>\n<li><p>Java：多线程，集合，IO，JVM 虚拟机</p>\n</li>\n<li><p>框架：Spring，Spring MVC，Spring Boot,Spring Cloud，Netty</p>\n</li>\n<li><p>中间件：ZooKeeper，Redis，RabbitMQ，Rocket MQ，Kafka，Dubbo</p>\n</li>\n<li><p>数据库：MySQL，MongDB，Elasticsearch</p>\n</li>\n<li><p>容器：Docker，K8S</p>\n</li>\n<li><p>音乐：乐理知识，和声学习，汤1—汤5，流行歌曲部分伴奏。</p>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":289,"excerpt":"","more":"<h3 id=\"最重要的事\"><a href=\"#最重要的事\" class=\"headerlink\" title=\"最重要的事\"></a>最重要的事</h3><ol>\n<li>算法</li>\n<li>Java 多线程、虚拟机</li>\n<li>分布式基础</li>\n</ol>\n<ul>\n<li><p>Acwing：算法基础, 算法提高课, 算法进阶课</p>\n</li>\n<li><p>理论：分布式，CAP，BASE，设计模式</p>\n</li>\n<li><p>基础：计算机体系结构，计算机网络，操作系统，计算机组成原理，编译原理</p>\n</li>\n<li><p>Java：多线程，集合，IO，JVM 虚拟机</p>\n</li>\n<li><p>框架：Spring，Spring MVC，Spring Boot,Spring Cloud，Netty</p>\n</li>\n<li><p>中间件：ZooKeeper，Redis，RabbitMQ，Rocket MQ，Kafka，Dubbo</p>\n</li>\n<li><p>数据库：MySQL，MongDB，Elasticsearch</p>\n</li>\n<li><p>容器：Docker，K8S</p>\n</li>\n<li><p>音乐：乐理知识，和声学习，汤1—汤5，流行歌曲部分伴奏。</p>\n</li>\n</ul>\n"},{"title":"基础算法模板","date":"2023-02-23T07:18:29.000Z","description":"学习 acwing 的基础算法篇。","_content":"# 一、快速排序\n\n```c++\nvoid quick_sort(int q[], int l, int r)\n{   \n    if (l >= r) return;\n\n    // 从左右两个端点开始\n    int i = l - 1, j = r + 1, x = q[l + r >> 1];\n    while (i < j)\n    {\n        // 通过分界点 x，使得小于 x 的元素放在左边，大于 x 的元素放在右边\n        do i ++ ; while (q[i] < x);\n        do j -- ; while (q[j] > x);\n        if (i < j) swap(q[i], q[j]);\n    }\n\n    // 递归排序左半边\n    quick_sort(q, l, j);\n    // 递归排序右半边\n    quick_sort(q, j + 1, r);\n}\n```\n\n# 二、第 K 个数\n\n```c++\nint quick_sort(int q[], int l, int r, int k)\n{\n    if (l >= r) return q[l];\n\n    int i = l - 1, j = r + 1, x = q[l + r >> 1];\n    while (i < j)\n    {\n        do i ++ ; while (q[i] < x);\n        do j -- ; while (q[j] > x);\n        if (i < j) swap(q[i], q[j]);\n    }\n\n    if (j - l + 1 >= k) return quick_sort(q, l, j, k);\n    else return quick_sort(q, j + 1, r, k - (j - l + 1));\n}\n```\n\n# 三、归并排序\n\n```c++\nvoid merge_sort(int q[], int l, int r)\n{\n    if (l >= r) return;\n\n    int mid = l + r >> 1;\n\n    merge_sort(q, l, mid), merge_sort(q, mid + 1, r);\n\n    int k = 0, i = l, j = mid + 1;\n    while (i <= mid && j <= r)\n        if (q[i] <= q[j]) tmp[k ++ ] = q[i ++ ];\n        else tmp[k ++ ] = q[j ++ ];\n    while (i <= mid) tmp[k ++ ] = q[i ++ ];\n    while (j <= r) tmp[k ++ ] = q[j ++ ];\n\n    for (i = l, j = 0; i <= r; i ++, j ++ ) q[i] = tmp[j];\n}\n```\n\n# 四、逆序对的数量\n\n```c++\nLL merge_sort(int q[], int l, int r)\n{\n    if (l >= r) return 0;\n\n    int mid = l + r >> 1;\n\n    LL res = merge_sort(q, l, mid) + merge_sort(q, mid + 1, r);\n\n    int k = 0, i = l, j = mid + 1;\n    while (i <= mid && j <= r)\n        if (q[i] <= q[j]) tmp[k ++ ] = q[i ++ ];\n        else\n        {\n            res += mid - i + 1;\n            tmp[k ++ ] = q[j ++ ];\n        }\n    while (i <= mid) tmp[k ++ ] = q[i ++ ];\n    while (j <= r) tmp[k ++ ] = q[j ++ ];\n\n    for (i = l, j = 0; i <= r; i ++, j ++ ) q[i] = tmp[j];\n\n    return res;\n}\n```\n\n# 五、二分模板\n1. 找左边第一个数\n```c++\nint l = 0, r = n - 1;\nwhile (l < r)\n{\n    int mid = l + r >> 1;\n    if (q[mid] >= x) r = mid;\n    else l = mid + 1;\n}\n```\n2. 找右边第一个数\n```c++\nint l = 0, r = n - 1;\nwhile (l < r)\n{\n    int mid = l + r + 1 >> 1;\n    if (q[mid] <= x) l = mid;\n    else r = mid - 1;\n}\n```\n\n# 六、高精度加法\n\n```c++\nvector<int> add(vector<int> &A, vector<int> &B)\n{\n    if (A.size() < B.size()) return add(B, A);\n\n    vector<int> C;\n    int t = 0;\n    for (int i = 0; i < A.size(); i ++ )\n    {\n        t += A[i];\n        if (i < B.size()) t += B[i];\n        C.push_back(t % 10);\n        t /= 10;\n    }\n\n    if (t) C.push_back(t);\n    return C;\n}\n```\n\n# 七、高精度减法\n\n```c++\nbool cmp(vector<int> &A, vector<int> &B)\n{\n    if (A.size() != B.size()) return A.size() > B.size();\n\n    for (int i = A.size() - 1; i >= 0; i -- )\n        if (A[i] != B[i])\n            return A[i] > B[i];\n\n    return true;\n}\n\nvector<int> sub(vector<int> &A, vector<int> &B)\n{\n    vector<int> C;\n    for (int i = 0, t = 0; i < A.size(); i ++ )\n    {\n        t = A[i] - t;\n        if (i < B.size()) t -= B[i];\n        C.push_back((t + 10) % 10);\n        if (t < 0) t = 1;\n        else t = 0;\n    }\n\n    while (C.size() > 1 && C.back() == 0) C.pop_back();\n    return C;\n}\n```\n\n# 八、高精度乘法\n\n```c++\nvector<int> mul(vector<int> &A, int b)\n{\n    vector<int> C;\n\n    int t = 0;\n    for (int i = 0; i < A.size() || t; i ++ )\n    {\n        if (i < A.size()) t += A[i] * b;\n        C.push_back(t % 10);\n        t /= 10;\n    }\n\n    while (C.size() > 1 && C.back() == 0) C.pop_back();\n\n    return C;\n}\n```\n\n# 九、高精度除法\n\n```c++\nvector<int> div(vector<int> &A, int b, int &r)\n{\n    vector<int> C;\n    r = 0;\n    for (int i = A.size() - 1; i >= 0; i -- )\n    {\n        r = r * 10 + A[i];\n        C.push_back(r / b);\n        r %= b;\n    }\n    reverse(C.begin(), C.end());\n    while (C.size() > 1 && C.back() == 0) C.pop_back();\n    return C;\n}\n```\n\n# 十、前缀和\n\n```c++\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i ++ ) scanf(\"%d\", &a[i]);\n\n    for (int i = 1; i <= n; i ++ ) s[i] = s[i - 1] + a[i]; // 前缀和的初始化\n\n    while (m -- )\n    {\n        int l, r;\n        scanf(\"%d%d\", &l, &r);\n        printf(\"%d\\n\", s[r] - s[l - 1]); // 区间和的计算\n    }\n\n    return 0;\n}\n```\n\n# 十一、子矩阵的和\n\n```c++\nint main()\n{\n    scanf(\"%d%d%d\", &n, &m, &q);\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = 1; j <= m; j ++ )\n            scanf(\"%d\", &s[i][j]);\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = 1; j <= m; j ++ )\n            s[i][j] += s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1];\n\n    while (q -- )\n    {\n        int x1, y1, x2, y2;\n        scanf(\"%d%d%d%d\", &x1, &y1, &x2, &y2);\n        printf(\"%d\\n\", s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1]);\n    }\n\n    return 0;\n}\n```\n\n# 十二、差分\n\n```c++\nvoid insert(int l, int r, int c)\n{\n    b[l] += c;\n    b[r + 1] -= c;\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i ++ ) scanf(\"%d\", &a[i]);\n\n    for (int i = 1; i <= n; i ++ ) insert(i, i, a[i]);\n\n    while (m -- )\n    {\n        int l, r, c;\n        scanf(\"%d%d%d\", &l, &r, &c);\n        insert(l, r, c);\n    }\n\n    for (int i = 1; i <= n; i ++ ) b[i] += b[i - 1];\n\n    for (int i = 1; i <= n; i ++ ) printf(\"%d \", b[i]);\n\n    return 0;\n}\n```\n\n# 十三、差分矩阵\n\n```c++\nvoid insert(int x1, int y1, int x2, int y2, int c)\n{\n    b[x1][y1] += c;\n    b[x2 + 1][y1] -= c;\n    b[x1][y2 + 1] -= c;\n    b[x2 + 1][y2 + 1] += c;\n}\n\nint main()\n{\n    scanf(\"%d%d%d\", &n, &m, &q);\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = 1; j <= m; j ++ )\n            scanf(\"%d\", &a[i][j]);\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = 1; j <= m; j ++ )\n            insert(i, j, i, j, a[i][j]);\n\n    while (q -- )\n    {\n        int x1, y1, x2, y2, c;\n        cin >> x1 >> y1 >> x2 >> y2 >> c;\n        insert(x1, y1, x2, y2, c);\n    }\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = 1; j <= m; j ++ )\n            b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j - 1];\n\n    for (int i = 1; i <= n; i ++ )\n    {\n        for (int j = 1; j <= m; j ++ ) printf(\"%d \", b[i][j]);\n        puts(\"\");\n    }\n\n    return 0;\n}\n```\n\n# 十四、最长连续不重复子序列 (双指针)\n\n```c++\nint main()\n{\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i ++ ) scanf(\"%d\", &q[i]);\n\n    int res = 0;\n    for (int i = 0, j = 0; i < n; i ++ )\n    {\n        s[q[i]] ++ ;\n        while (j < i && s[q[i]] > 1) s[q[j ++ ]] -- ;\n        res = max(res, i - j + 1);\n    }\n\n    cout << res << endl;\n\n    return 0;\n}\n```\n\n# 十五、数组元素的目标和 (双指针)\n\n```c++\nint main()\n{\n    scanf(\"%d%d%d\", &n, &m, &x);\n    for (int i = 0; i < n; i ++ ) scanf(\"%d\", &a[i]);\n    for (int i = 0; i < m; i ++ ) scanf(\"%d\", &b[i]);\n\n    for (int i = 0, j = m - 1; i < n; i ++ )\n    {\n        while (j >= 0 && a[i] + b[j] > x) j -- ;\n        if (j >= 0 && a[i] + b[j] == x) cout << i << ' ' << j << endl;\n    }\n\n    return 0;\n}\n```\n\n# 十六、判断子序列 (双指针)\n\n```c++\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < n; i ++ ) scanf(\"%d\", &a[i]);\n    for (int i = 0; i < m; i ++ ) scanf(\"%d\", &b[i]);\n\n    int i = 0, j = 0;\n    while (i < n && j < m)\n    {\n        if (a[i] == b[j]) i ++ ;\n        j ++ ;\n    }\n\n    if (i == n) puts(\"Yes\");\n    else puts(\"No\");\n\n    return 0;\n}\n```\n\n# 十七、二进制中1的个数\n\n```c++\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    while (n -- )\n    {\n        int x, s = 0;\n        scanf(\"%d\", &x);\n\n        for (int i = x; i; i -= i & -i) s ++ ;\n\n        printf(\"%d \", s);\n    }\n\n    return 0;\n}\n```\n\n# 十八、区间和\n\n```c++\ntypedef pair<int, int> PII;\n\nconst int N = 300010;\n\nint n, m;\nint a[N], s[N];\n\nvector<int> alls;\nvector<PII> add, query;\n\nint find(int x)\n{\n    int l = 0, r = alls.size() - 1;\n    while (l < r)\n    {\n        int mid = l + r >> 1;\n        if (alls[mid] >= x) r = mid;\n        else l = mid + 1;\n    }\n    return r + 1;\n}\n\nint main()\n{\n    cin >> n >> m;\n    for (int i = 0; i < n; i ++ )\n    {\n        int x, c;\n        cin >> x >> c;\n        add.push_back({x, c});\n\n        alls.push_back(x);\n    }\n\n    for (int i = 0; i < m; i ++ )\n    {\n        int l, r;\n        cin >> l >> r;\n        query.push_back({l, r});\n\n        alls.push_back(l);\n        alls.push_back(r);\n    }\n\n    // 去重\n    sort(alls.begin(), alls.end());\n    alls.erase(unique(alls.begin(), alls.end()), alls.end());\n\n    // 处理插入\n    for (auto item : add)\n    {\n        int x = find(item.first);\n        a[x] += item.second;\n    }\n\n    // 预处理前缀和\n    for (int i = 1; i <= alls.size(); i ++ ) s[i] = s[i - 1] + a[i];\n\n    // 处理询问\n    for (auto item : query)\n    {\n        int l = find(item.first), r = find(item.second);\n        cout << s[r] - s[l - 1] << endl;\n    }\n\n    return 0;\n}\n```\n\n# 十七、区间合并\n\n```c++\ntypedef pair<int, int> PII;\n\nvoid merge(vector<PII> &segs)\n{\n    vector<PII> res;\n\n    sort(segs.begin(), segs.end());\n\n    int st = -2e9, ed = -2e9;\n    for (auto seg : segs)\n        if (ed < seg.first)\n        {\n            if (st != -2e9) res.push_back({st, ed});\n            st = seg.first, ed = seg.second;\n        }\n        else ed = max(ed, seg.second);\n\n    if (st != -2e9) res.push_back({st, ed});\n\n    segs = res;\n}\n```","source":"_posts/acwing/算法基础课/基础算法.md","raw":"---\ntitle: 基础算法模板\ncategories: [\"acwing\", \"算法基础课\"]\ndate: 2023-02-23 15:18:29\ntags:\ndescription: 学习 acwing 的基础算法篇。\n---\n# 一、快速排序\n\n```c++\nvoid quick_sort(int q[], int l, int r)\n{   \n    if (l >= r) return;\n\n    // 从左右两个端点开始\n    int i = l - 1, j = r + 1, x = q[l + r >> 1];\n    while (i < j)\n    {\n        // 通过分界点 x，使得小于 x 的元素放在左边，大于 x 的元素放在右边\n        do i ++ ; while (q[i] < x);\n        do j -- ; while (q[j] > x);\n        if (i < j) swap(q[i], q[j]);\n    }\n\n    // 递归排序左半边\n    quick_sort(q, l, j);\n    // 递归排序右半边\n    quick_sort(q, j + 1, r);\n}\n```\n\n# 二、第 K 个数\n\n```c++\nint quick_sort(int q[], int l, int r, int k)\n{\n    if (l >= r) return q[l];\n\n    int i = l - 1, j = r + 1, x = q[l + r >> 1];\n    while (i < j)\n    {\n        do i ++ ; while (q[i] < x);\n        do j -- ; while (q[j] > x);\n        if (i < j) swap(q[i], q[j]);\n    }\n\n    if (j - l + 1 >= k) return quick_sort(q, l, j, k);\n    else return quick_sort(q, j + 1, r, k - (j - l + 1));\n}\n```\n\n# 三、归并排序\n\n```c++\nvoid merge_sort(int q[], int l, int r)\n{\n    if (l >= r) return;\n\n    int mid = l + r >> 1;\n\n    merge_sort(q, l, mid), merge_sort(q, mid + 1, r);\n\n    int k = 0, i = l, j = mid + 1;\n    while (i <= mid && j <= r)\n        if (q[i] <= q[j]) tmp[k ++ ] = q[i ++ ];\n        else tmp[k ++ ] = q[j ++ ];\n    while (i <= mid) tmp[k ++ ] = q[i ++ ];\n    while (j <= r) tmp[k ++ ] = q[j ++ ];\n\n    for (i = l, j = 0; i <= r; i ++, j ++ ) q[i] = tmp[j];\n}\n```\n\n# 四、逆序对的数量\n\n```c++\nLL merge_sort(int q[], int l, int r)\n{\n    if (l >= r) return 0;\n\n    int mid = l + r >> 1;\n\n    LL res = merge_sort(q, l, mid) + merge_sort(q, mid + 1, r);\n\n    int k = 0, i = l, j = mid + 1;\n    while (i <= mid && j <= r)\n        if (q[i] <= q[j]) tmp[k ++ ] = q[i ++ ];\n        else\n        {\n            res += mid - i + 1;\n            tmp[k ++ ] = q[j ++ ];\n        }\n    while (i <= mid) tmp[k ++ ] = q[i ++ ];\n    while (j <= r) tmp[k ++ ] = q[j ++ ];\n\n    for (i = l, j = 0; i <= r; i ++, j ++ ) q[i] = tmp[j];\n\n    return res;\n}\n```\n\n# 五、二分模板\n1. 找左边第一个数\n```c++\nint l = 0, r = n - 1;\nwhile (l < r)\n{\n    int mid = l + r >> 1;\n    if (q[mid] >= x) r = mid;\n    else l = mid + 1;\n}\n```\n2. 找右边第一个数\n```c++\nint l = 0, r = n - 1;\nwhile (l < r)\n{\n    int mid = l + r + 1 >> 1;\n    if (q[mid] <= x) l = mid;\n    else r = mid - 1;\n}\n```\n\n# 六、高精度加法\n\n```c++\nvector<int> add(vector<int> &A, vector<int> &B)\n{\n    if (A.size() < B.size()) return add(B, A);\n\n    vector<int> C;\n    int t = 0;\n    for (int i = 0; i < A.size(); i ++ )\n    {\n        t += A[i];\n        if (i < B.size()) t += B[i];\n        C.push_back(t % 10);\n        t /= 10;\n    }\n\n    if (t) C.push_back(t);\n    return C;\n}\n```\n\n# 七、高精度减法\n\n```c++\nbool cmp(vector<int> &A, vector<int> &B)\n{\n    if (A.size() != B.size()) return A.size() > B.size();\n\n    for (int i = A.size() - 1; i >= 0; i -- )\n        if (A[i] != B[i])\n            return A[i] > B[i];\n\n    return true;\n}\n\nvector<int> sub(vector<int> &A, vector<int> &B)\n{\n    vector<int> C;\n    for (int i = 0, t = 0; i < A.size(); i ++ )\n    {\n        t = A[i] - t;\n        if (i < B.size()) t -= B[i];\n        C.push_back((t + 10) % 10);\n        if (t < 0) t = 1;\n        else t = 0;\n    }\n\n    while (C.size() > 1 && C.back() == 0) C.pop_back();\n    return C;\n}\n```\n\n# 八、高精度乘法\n\n```c++\nvector<int> mul(vector<int> &A, int b)\n{\n    vector<int> C;\n\n    int t = 0;\n    for (int i = 0; i < A.size() || t; i ++ )\n    {\n        if (i < A.size()) t += A[i] * b;\n        C.push_back(t % 10);\n        t /= 10;\n    }\n\n    while (C.size() > 1 && C.back() == 0) C.pop_back();\n\n    return C;\n}\n```\n\n# 九、高精度除法\n\n```c++\nvector<int> div(vector<int> &A, int b, int &r)\n{\n    vector<int> C;\n    r = 0;\n    for (int i = A.size() - 1; i >= 0; i -- )\n    {\n        r = r * 10 + A[i];\n        C.push_back(r / b);\n        r %= b;\n    }\n    reverse(C.begin(), C.end());\n    while (C.size() > 1 && C.back() == 0) C.pop_back();\n    return C;\n}\n```\n\n# 十、前缀和\n\n```c++\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i ++ ) scanf(\"%d\", &a[i]);\n\n    for (int i = 1; i <= n; i ++ ) s[i] = s[i - 1] + a[i]; // 前缀和的初始化\n\n    while (m -- )\n    {\n        int l, r;\n        scanf(\"%d%d\", &l, &r);\n        printf(\"%d\\n\", s[r] - s[l - 1]); // 区间和的计算\n    }\n\n    return 0;\n}\n```\n\n# 十一、子矩阵的和\n\n```c++\nint main()\n{\n    scanf(\"%d%d%d\", &n, &m, &q);\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = 1; j <= m; j ++ )\n            scanf(\"%d\", &s[i][j]);\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = 1; j <= m; j ++ )\n            s[i][j] += s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1];\n\n    while (q -- )\n    {\n        int x1, y1, x2, y2;\n        scanf(\"%d%d%d%d\", &x1, &y1, &x2, &y2);\n        printf(\"%d\\n\", s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1]);\n    }\n\n    return 0;\n}\n```\n\n# 十二、差分\n\n```c++\nvoid insert(int l, int r, int c)\n{\n    b[l] += c;\n    b[r + 1] -= c;\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i ++ ) scanf(\"%d\", &a[i]);\n\n    for (int i = 1; i <= n; i ++ ) insert(i, i, a[i]);\n\n    while (m -- )\n    {\n        int l, r, c;\n        scanf(\"%d%d%d\", &l, &r, &c);\n        insert(l, r, c);\n    }\n\n    for (int i = 1; i <= n; i ++ ) b[i] += b[i - 1];\n\n    for (int i = 1; i <= n; i ++ ) printf(\"%d \", b[i]);\n\n    return 0;\n}\n```\n\n# 十三、差分矩阵\n\n```c++\nvoid insert(int x1, int y1, int x2, int y2, int c)\n{\n    b[x1][y1] += c;\n    b[x2 + 1][y1] -= c;\n    b[x1][y2 + 1] -= c;\n    b[x2 + 1][y2 + 1] += c;\n}\n\nint main()\n{\n    scanf(\"%d%d%d\", &n, &m, &q);\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = 1; j <= m; j ++ )\n            scanf(\"%d\", &a[i][j]);\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = 1; j <= m; j ++ )\n            insert(i, j, i, j, a[i][j]);\n\n    while (q -- )\n    {\n        int x1, y1, x2, y2, c;\n        cin >> x1 >> y1 >> x2 >> y2 >> c;\n        insert(x1, y1, x2, y2, c);\n    }\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = 1; j <= m; j ++ )\n            b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j - 1];\n\n    for (int i = 1; i <= n; i ++ )\n    {\n        for (int j = 1; j <= m; j ++ ) printf(\"%d \", b[i][j]);\n        puts(\"\");\n    }\n\n    return 0;\n}\n```\n\n# 十四、最长连续不重复子序列 (双指针)\n\n```c++\nint main()\n{\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i ++ ) scanf(\"%d\", &q[i]);\n\n    int res = 0;\n    for (int i = 0, j = 0; i < n; i ++ )\n    {\n        s[q[i]] ++ ;\n        while (j < i && s[q[i]] > 1) s[q[j ++ ]] -- ;\n        res = max(res, i - j + 1);\n    }\n\n    cout << res << endl;\n\n    return 0;\n}\n```\n\n# 十五、数组元素的目标和 (双指针)\n\n```c++\nint main()\n{\n    scanf(\"%d%d%d\", &n, &m, &x);\n    for (int i = 0; i < n; i ++ ) scanf(\"%d\", &a[i]);\n    for (int i = 0; i < m; i ++ ) scanf(\"%d\", &b[i]);\n\n    for (int i = 0, j = m - 1; i < n; i ++ )\n    {\n        while (j >= 0 && a[i] + b[j] > x) j -- ;\n        if (j >= 0 && a[i] + b[j] == x) cout << i << ' ' << j << endl;\n    }\n\n    return 0;\n}\n```\n\n# 十六、判断子序列 (双指针)\n\n```c++\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < n; i ++ ) scanf(\"%d\", &a[i]);\n    for (int i = 0; i < m; i ++ ) scanf(\"%d\", &b[i]);\n\n    int i = 0, j = 0;\n    while (i < n && j < m)\n    {\n        if (a[i] == b[j]) i ++ ;\n        j ++ ;\n    }\n\n    if (i == n) puts(\"Yes\");\n    else puts(\"No\");\n\n    return 0;\n}\n```\n\n# 十七、二进制中1的个数\n\n```c++\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    while (n -- )\n    {\n        int x, s = 0;\n        scanf(\"%d\", &x);\n\n        for (int i = x; i; i -= i & -i) s ++ ;\n\n        printf(\"%d \", s);\n    }\n\n    return 0;\n}\n```\n\n# 十八、区间和\n\n```c++\ntypedef pair<int, int> PII;\n\nconst int N = 300010;\n\nint n, m;\nint a[N], s[N];\n\nvector<int> alls;\nvector<PII> add, query;\n\nint find(int x)\n{\n    int l = 0, r = alls.size() - 1;\n    while (l < r)\n    {\n        int mid = l + r >> 1;\n        if (alls[mid] >= x) r = mid;\n        else l = mid + 1;\n    }\n    return r + 1;\n}\n\nint main()\n{\n    cin >> n >> m;\n    for (int i = 0; i < n; i ++ )\n    {\n        int x, c;\n        cin >> x >> c;\n        add.push_back({x, c});\n\n        alls.push_back(x);\n    }\n\n    for (int i = 0; i < m; i ++ )\n    {\n        int l, r;\n        cin >> l >> r;\n        query.push_back({l, r});\n\n        alls.push_back(l);\n        alls.push_back(r);\n    }\n\n    // 去重\n    sort(alls.begin(), alls.end());\n    alls.erase(unique(alls.begin(), alls.end()), alls.end());\n\n    // 处理插入\n    for (auto item : add)\n    {\n        int x = find(item.first);\n        a[x] += item.second;\n    }\n\n    // 预处理前缀和\n    for (int i = 1; i <= alls.size(); i ++ ) s[i] = s[i - 1] + a[i];\n\n    // 处理询问\n    for (auto item : query)\n    {\n        int l = find(item.first), r = find(item.second);\n        cout << s[r] - s[l - 1] << endl;\n    }\n\n    return 0;\n}\n```\n\n# 十七、区间合并\n\n```c++\ntypedef pair<int, int> PII;\n\nvoid merge(vector<PII> &segs)\n{\n    vector<PII> res;\n\n    sort(segs.begin(), segs.end());\n\n    int st = -2e9, ed = -2e9;\n    for (auto seg : segs)\n        if (ed < seg.first)\n        {\n            if (st != -2e9) res.push_back({st, ed});\n            st = seg.first, ed = seg.second;\n        }\n        else ed = max(ed, seg.second);\n\n    if (st != -2e9) res.push_back({st, ed});\n\n    segs = res;\n}\n```","slug":"acwing/算法基础课/基础算法","published":1,"updated":"2023-02-23T07:47:31.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clegsyv790001hwtvhvb44qw1","content":"<h1 id=\"一、快速排序\"><a href=\"#一、快速排序\" class=\"headerlink\" title=\"一、快速排序\"></a>一、快速排序</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> q[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\"></span>&#123;   <br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br><br>    <span class=\"hljs-comment\">// 从左右两个端点开始</span><br>    <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = q[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">while</span> (i &lt; j)<br>    &#123;<br>        <span class=\"hljs-comment\">// 通过分界点 x，使得小于 x 的元素放在左边，大于 x 的元素放在右边</span><br>        <span class=\"hljs-keyword\">do</span> i ++ ; <span class=\"hljs-keyword\">while</span> (q[i] &lt; x);<br>        <span class=\"hljs-keyword\">do</span> j -- ; <span class=\"hljs-keyword\">while</span> (q[j] &gt; x);<br>        <span class=\"hljs-keyword\">if</span> (i &lt; j) <span class=\"hljs-built_in\">swap</span>(q[i], q[j]);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 递归排序左半边</span><br>    <span class=\"hljs-built_in\">quick_sort</span>(q, l, j);<br>    <span class=\"hljs-comment\">// 递归排序右半边</span><br>    <span class=\"hljs-built_in\">quick_sort</span>(q, j + <span class=\"hljs-number\">1</span>, r);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"二、第-K-个数\"><a href=\"#二、第-K-个数\" class=\"headerlink\" title=\"二、第 K 个数\"></a>二、第 K 个数</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> q[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> k)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span> q[l];<br><br>    <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = q[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">while</span> (i &lt; j)<br>    &#123;<br>        <span class=\"hljs-keyword\">do</span> i ++ ; <span class=\"hljs-keyword\">while</span> (q[i] &lt; x);<br>        <span class=\"hljs-keyword\">do</span> j -- ; <span class=\"hljs-keyword\">while</span> (q[j] &gt; x);<br>        <span class=\"hljs-keyword\">if</span> (i &lt; j) <span class=\"hljs-built_in\">swap</span>(q[i], q[j]);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (j - l + <span class=\"hljs-number\">1</span> &gt;= k) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">quick_sort</span>(q, l, j, k);<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">quick_sort</span>(q, j + <span class=\"hljs-number\">1</span>, r, k - (j - l + <span class=\"hljs-number\">1</span>));<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"三、归并排序\"><a href=\"#三、归并排序\" class=\"headerlink\" title=\"三、归并排序\"></a>三、归并排序</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> q[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br><br>    <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-built_in\">merge_sort</span>(q, l, mid), <span class=\"hljs-built_in\">merge_sort</span>(q, mid + <span class=\"hljs-number\">1</span>, r);<br><br>    <span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>, i = l, j = mid + <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class=\"hljs-keyword\">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];<br>        <span class=\"hljs-keyword\">else</span> tmp[k ++ ] = q[j ++ ];<br>    <span class=\"hljs-keyword\">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<br>    <span class=\"hljs-keyword\">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br><br>    <span class=\"hljs-keyword\">for</span> (i = l, j = <span class=\"hljs-number\">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"四、逆序对的数量\"><a href=\"#四、逆序对的数量\" class=\"headerlink\" title=\"四、逆序对的数量\"></a>四、逆序对的数量</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">LL <span class=\"hljs-title\">merge_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> q[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br><br>    LL res = <span class=\"hljs-built_in\">merge_sort</span>(q, l, mid) + <span class=\"hljs-built_in\">merge_sort</span>(q, mid + <span class=\"hljs-number\">1</span>, r);<br><br>    <span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>, i = l, j = mid + <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class=\"hljs-keyword\">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            res += mid - i + <span class=\"hljs-number\">1</span>;<br>            tmp[k ++ ] = q[j ++ ];<br>        &#125;<br>    <span class=\"hljs-keyword\">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<br>    <span class=\"hljs-keyword\">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br><br>    <span class=\"hljs-keyword\">for</span> (i = l, j = <span class=\"hljs-number\">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<br><br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"五、二分模板\"><a href=\"#五、二分模板\" class=\"headerlink\" title=\"五、二分模板\"></a>五、二分模板</h1><ol>\n<li>找左边第一个数<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">0</span>, r = n - <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">while</span> (l &lt; r)<br>&#123;<br>    <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span> (q[mid] &gt;= x) r = mid;<br>    <span class=\"hljs-keyword\">else</span> l = mid + <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li>\n<li>找右边第一个数<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">0</span>, r = n - <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">while</span> (l &lt; r)<br>&#123;<br>    <span class=\"hljs-type\">int</span> mid = l + r + <span class=\"hljs-number\">1</span> &gt;&gt; <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span> (q[mid] &lt;= x) l = mid;<br>    <span class=\"hljs-keyword\">else</span> r = mid - <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li>\n</ol>\n<h1 id=\"六、高精度加法\"><a href=\"#六、高精度加法\" class=\"headerlink\" title=\"六、高精度加法\"></a>六、高精度加法</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;A, vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;B)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (A.<span class=\"hljs-built_in\">size</span>() &lt; B.<span class=\"hljs-built_in\">size</span>()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">add</span>(B, A);<br><br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; C;<br>    <span class=\"hljs-type\">int</span> t = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>(); i ++ )<br>    &#123;<br>        t += A[i];<br>        <span class=\"hljs-keyword\">if</span> (i &lt; B.<span class=\"hljs-built_in\">size</span>()) t += B[i];<br>        C.<span class=\"hljs-built_in\">push_back</span>(t % <span class=\"hljs-number\">10</span>);<br>        t /= <span class=\"hljs-number\">10</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (t) C.<span class=\"hljs-built_in\">push_back</span>(t);<br>    <span class=\"hljs-keyword\">return</span> C;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"七、高精度减法\"><a href=\"#七、高精度减法\" class=\"headerlink\" title=\"七、高精度减法\"></a>七、高精度减法</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;A, vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;B)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (A.<span class=\"hljs-built_in\">size</span>() != B.<span class=\"hljs-built_in\">size</span>()) <span class=\"hljs-keyword\">return</span> A.<span class=\"hljs-built_in\">size</span>() &gt; B.<span class=\"hljs-built_in\">size</span>();<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = A.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i -- )<br>        <span class=\"hljs-keyword\">if</span> (A[i] != B[i])<br>            <span class=\"hljs-keyword\">return</span> A[i] &gt; B[i];<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><br><span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">sub</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;A, vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;B)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; C;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, t = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>(); i ++ )<br>    &#123;<br>        t = A[i] - t;<br>        <span class=\"hljs-keyword\">if</span> (i &lt; B.<span class=\"hljs-built_in\">size</span>()) t -= B[i];<br>        C.<span class=\"hljs-built_in\">push_back</span>((t + <span class=\"hljs-number\">10</span>) % <span class=\"hljs-number\">10</span>);<br>        <span class=\"hljs-keyword\">if</span> (t &lt; <span class=\"hljs-number\">0</span>) t = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">else</span> t = <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">while</span> (C.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> &amp;&amp; C.<span class=\"hljs-built_in\">back</span>() == <span class=\"hljs-number\">0</span>) C.<span class=\"hljs-built_in\">pop_back</span>();<br>    <span class=\"hljs-keyword\">return</span> C;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"八、高精度乘法\"><a href=\"#八、高精度乘法\" class=\"headerlink\" title=\"八、高精度乘法\"></a>八、高精度乘法</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">mul</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;A, <span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; C;<br><br>    <span class=\"hljs-type\">int</span> t = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>() || t; i ++ )<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (i &lt; A.<span class=\"hljs-built_in\">size</span>()) t += A[i] * b;<br>        C.<span class=\"hljs-built_in\">push_back</span>(t % <span class=\"hljs-number\">10</span>);<br>        t /= <span class=\"hljs-number\">10</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">while</span> (C.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> &amp;&amp; C.<span class=\"hljs-built_in\">back</span>() == <span class=\"hljs-number\">0</span>) C.<span class=\"hljs-built_in\">pop_back</span>();<br><br>    <span class=\"hljs-keyword\">return</span> C;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"九、高精度除法\"><a href=\"#九、高精度除法\" class=\"headerlink\" title=\"九、高精度除法\"></a>九、高精度除法</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">div</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;A, <span class=\"hljs-type\">int</span> b, <span class=\"hljs-type\">int</span> &amp;r)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; C;<br>    r = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = A.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i -- )<br>    &#123;<br>        r = r * <span class=\"hljs-number\">10</span> + A[i];<br>        C.<span class=\"hljs-built_in\">push_back</span>(r / b);<br>        r %= b;<br>    &#125;<br>    <span class=\"hljs-built_in\">reverse</span>(C.<span class=\"hljs-built_in\">begin</span>(), C.<span class=\"hljs-built_in\">end</span>());<br>    <span class=\"hljs-keyword\">while</span> (C.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> &amp;&amp; C.<span class=\"hljs-built_in\">back</span>() == <span class=\"hljs-number\">0</span>) C.<span class=\"hljs-built_in\">pop_back</span>();<br>    <span class=\"hljs-keyword\">return</span> C;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"十、前缀和\"><a href=\"#十、前缀和\" class=\"headerlink\" title=\"十、前缀和\"></a>十、前缀和</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;a[i]);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ ) s[i] = s[i - <span class=\"hljs-number\">1</span>] + a[i]; <span class=\"hljs-comment\">// 前缀和的初始化</span><br><br>    <span class=\"hljs-keyword\">while</span> (m -- )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> l, r;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, s[r] - s[l - <span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// 区间和的计算</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"十一、子矩阵的和\"><a href=\"#十一、子矩阵的和\" class=\"headerlink\" title=\"十一、子矩阵的和\"></a>十一、子矩阵的和</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ )<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;s[i][j]);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ )<br>            s[i][j] += s[i - <span class=\"hljs-number\">1</span>][j] + s[i][j - <span class=\"hljs-number\">1</span>] - s[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>];<br><br>    <span class=\"hljs-keyword\">while</span> (q -- )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> x1, y1, x2, y2;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, s[x2][y2] - s[x1 - <span class=\"hljs-number\">1</span>][y2] - s[x2][y1 - <span class=\"hljs-number\">1</span>] + s[x1 - <span class=\"hljs-number\">1</span>][y1 - <span class=\"hljs-number\">1</span>]);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"十二、差分\"><a href=\"#十二、差分\" class=\"headerlink\" title=\"十二、差分\"></a>十二、差分</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> c)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    b[l] += c;<br>    b[r + <span class=\"hljs-number\">1</span>] -= c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;a[i]);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ ) <span class=\"hljs-built_in\">insert</span>(i, i, a[i]);<br><br>    <span class=\"hljs-keyword\">while</span> (m -- )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> l, r, c;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;c);<br>        <span class=\"hljs-built_in\">insert</span>(l, r, c);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ ) b[i] += b[i - <span class=\"hljs-number\">1</span>];<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ ) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, b[i]);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"十三、差分矩阵\"><a href=\"#十三、差分矩阵\" class=\"headerlink\" title=\"十三、差分矩阵\"></a>十三、差分矩阵</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x1, <span class=\"hljs-type\">int</span> y1, <span class=\"hljs-type\">int</span> x2, <span class=\"hljs-type\">int</span> y2, <span class=\"hljs-type\">int</span> c)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    b[x1][y1] += c;<br>    b[x2 + <span class=\"hljs-number\">1</span>][y1] -= c;<br>    b[x1][y2 + <span class=\"hljs-number\">1</span>] -= c;<br>    b[x2 + <span class=\"hljs-number\">1</span>][y2 + <span class=\"hljs-number\">1</span>] += c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ )<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;a[i][j]);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ )<br>            <span class=\"hljs-built_in\">insert</span>(i, j, i, j, a[i][j]);<br><br>    <span class=\"hljs-keyword\">while</span> (q -- )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> x1, y1, x2, y2, c;<br>        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;<br>        <span class=\"hljs-built_in\">insert</span>(x1, y1, x2, y2, c);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ )<br>            b[i][j] += b[i - <span class=\"hljs-number\">1</span>][j] + b[i][j - <span class=\"hljs-number\">1</span>] - b[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>];<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ ) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, b[i][j]);<br>        <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"十四、最长连续不重复子序列-双指针\"><a href=\"#十四、最长连续不重复子序列-双指针\" class=\"headerlink\" title=\"十四、最长连续不重复子序列 (双指针)\"></a>十四、最长连续不重复子序列 (双指针)</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;q[i]);<br><br>    <span class=\"hljs-type\">int</span> res = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        s[q[i]] ++ ;<br>        <span class=\"hljs-keyword\">while</span> (j &lt; i &amp;&amp; s[q[i]] &gt; <span class=\"hljs-number\">1</span>) s[q[j ++ ]] -- ;<br>        res = <span class=\"hljs-built_in\">max</span>(res, i - j + <span class=\"hljs-number\">1</span>);<br>    &#125;<br><br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"十五、数组元素的目标和-双指针\"><a href=\"#十五、数组元素的目标和-双指针\" class=\"headerlink\" title=\"十五、数组元素的目标和 (双指针)\"></a>十五、数组元素的目标和 (双指针)</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;x);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;b[i]);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, j = m - <span class=\"hljs-number\">1</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; a[i] + b[j] &gt; x) j -- ;<br>        <span class=\"hljs-keyword\">if</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; a[i] + b[j] == x) cout &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&#x27; &#x27;</span> &lt;&lt; j &lt;&lt; endl;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"十六、判断子序列-双指针\"><a href=\"#十六、判断子序列-双指针\" class=\"headerlink\" title=\"十六、判断子序列 (双指针)\"></a>十六、判断子序列 (双指针)</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;b[i]);<br><br>    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span> (i &lt; n &amp;&amp; j &lt; m)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (a[i] == b[j]) i ++ ;<br>        j ++ ;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (i == n) <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Yes&quot;</span>);<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;No&quot;</span>);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"十七、二进制中1的个数\"><a href=\"#十七、二进制中1的个数\" class=\"headerlink\" title=\"十七、二进制中1的个数\"></a>十七、二进制中1的个数</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);<br>    <span class=\"hljs-keyword\">while</span> (n -- )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> x, s = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;x);<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = x; i; i -= i &amp; -i) s ++ ;<br><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, s);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"十八、区间和\"><a href=\"#十八、区间和\" class=\"headerlink\" title=\"十八、区间和\"></a>十八、区间和</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N = <span class=\"hljs-number\">300010</span>;<br><br><span class=\"hljs-type\">int</span> n, m;<br><span class=\"hljs-type\">int</span> a[N], s[N];<br><br>vector&lt;<span class=\"hljs-type\">int</span>&gt; alls;<br>vector&lt;PII&gt; add, query;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">0</span>, r = alls.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span> (l &lt; r)<br>    &#123;<br>        <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (alls[mid] &gt;= x) r = mid;<br>        <span class=\"hljs-keyword\">else</span> l = mid + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> r + <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> x, c;<br>        cin &gt;&gt; x &gt;&gt; c;<br>        add.<span class=\"hljs-built_in\">push_back</span>(&#123;x, c&#125;);<br><br>        alls.<span class=\"hljs-built_in\">push_back</span>(x);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        query.<span class=\"hljs-built_in\">push_back</span>(&#123;l, r&#125;);<br><br>        alls.<span class=\"hljs-built_in\">push_back</span>(l);<br>        alls.<span class=\"hljs-built_in\">push_back</span>(r);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 去重</span><br>    <span class=\"hljs-built_in\">sort</span>(alls.<span class=\"hljs-built_in\">begin</span>(), alls.<span class=\"hljs-built_in\">end</span>());<br>    alls.<span class=\"hljs-built_in\">erase</span>(<span class=\"hljs-built_in\">unique</span>(alls.<span class=\"hljs-built_in\">begin</span>(), alls.<span class=\"hljs-built_in\">end</span>()), alls.<span class=\"hljs-built_in\">end</span>());<br><br>    <span class=\"hljs-comment\">// 处理插入</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> item : add)<br>    &#123;<br>        <span class=\"hljs-type\">int</span> x = <span class=\"hljs-built_in\">find</span>(item.first);<br>        a[x] += item.second;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 预处理前缀和</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= alls.<span class=\"hljs-built_in\">size</span>(); i ++ ) s[i] = s[i - <span class=\"hljs-number\">1</span>] + a[i];<br><br>    <span class=\"hljs-comment\">// 处理询问</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> item : query)<br>    &#123;<br>        <span class=\"hljs-type\">int</span> l = <span class=\"hljs-built_in\">find</span>(item.first), r = <span class=\"hljs-built_in\">find</span>(item.second);<br>        cout &lt;&lt; s[r] - s[l - <span class=\"hljs-number\">1</span>] &lt;&lt; endl;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"十七、区间合并\"><a href=\"#十七、区间合并\" class=\"headerlink\" title=\"十七、区间合并\"></a>十七、区间合并</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(vector&lt;PII&gt; &amp;segs)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    vector&lt;PII&gt; res;<br><br>    <span class=\"hljs-built_in\">sort</span>(segs.<span class=\"hljs-built_in\">begin</span>(), segs.<span class=\"hljs-built_in\">end</span>());<br><br>    <span class=\"hljs-type\">int</span> st = <span class=\"hljs-number\">-2e9</span>, ed = <span class=\"hljs-number\">-2e9</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> seg : segs)<br>        <span class=\"hljs-keyword\">if</span> (ed &lt; seg.first)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (st != <span class=\"hljs-number\">-2e9</span>) res.<span class=\"hljs-built_in\">push_back</span>(&#123;st, ed&#125;);<br>            st = seg.first, ed = seg.second;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> ed = <span class=\"hljs-built_in\">max</span>(ed, seg.second);<br><br>    <span class=\"hljs-keyword\">if</span> (st != <span class=\"hljs-number\">-2e9</span>) res.<span class=\"hljs-built_in\">push_back</span>(&#123;st, ed&#125;);<br><br>    segs = res;<br>&#125;<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"wordcount":7621,"excerpt":"","more":"<h1 id=\"一、快速排序\"><a href=\"#一、快速排序\" class=\"headerlink\" title=\"一、快速排序\"></a>一、快速排序</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> q[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\"></span>&#123;   <br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br><br>    <span class=\"hljs-comment\">// 从左右两个端点开始</span><br>    <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = q[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">while</span> (i &lt; j)<br>    &#123;<br>        <span class=\"hljs-comment\">// 通过分界点 x，使得小于 x 的元素放在左边，大于 x 的元素放在右边</span><br>        <span class=\"hljs-keyword\">do</span> i ++ ; <span class=\"hljs-keyword\">while</span> (q[i] &lt; x);<br>        <span class=\"hljs-keyword\">do</span> j -- ; <span class=\"hljs-keyword\">while</span> (q[j] &gt; x);<br>        <span class=\"hljs-keyword\">if</span> (i &lt; j) <span class=\"hljs-built_in\">swap</span>(q[i], q[j]);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 递归排序左半边</span><br>    <span class=\"hljs-built_in\">quick_sort</span>(q, l, j);<br>    <span class=\"hljs-comment\">// 递归排序右半边</span><br>    <span class=\"hljs-built_in\">quick_sort</span>(q, j + <span class=\"hljs-number\">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"二、第-K-个数\"><a href=\"#二、第-K-个数\" class=\"headerlink\" title=\"二、第 K 个数\"></a>二、第 K 个数</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> q[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> k)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span> q[l];<br><br>    <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = q[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">while</span> (i &lt; j)<br>    &#123;<br>        <span class=\"hljs-keyword\">do</span> i ++ ; <span class=\"hljs-keyword\">while</span> (q[i] &lt; x);<br>        <span class=\"hljs-keyword\">do</span> j -- ; <span class=\"hljs-keyword\">while</span> (q[j] &gt; x);<br>        <span class=\"hljs-keyword\">if</span> (i &lt; j) <span class=\"hljs-built_in\">swap</span>(q[i], q[j]);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (j - l + <span class=\"hljs-number\">1</span> &gt;= k) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">quick_sort</span>(q, l, j, k);<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">quick_sort</span>(q, j + <span class=\"hljs-number\">1</span>, r, k - (j - l + <span class=\"hljs-number\">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"三、归并排序\"><a href=\"#三、归并排序\" class=\"headerlink\" title=\"三、归并排序\"></a>三、归并排序</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> q[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br><br>    <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-built_in\">merge_sort</span>(q, l, mid), <span class=\"hljs-built_in\">merge_sort</span>(q, mid + <span class=\"hljs-number\">1</span>, r);<br><br>    <span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>, i = l, j = mid + <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class=\"hljs-keyword\">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];<br>        <span class=\"hljs-keyword\">else</span> tmp[k ++ ] = q[j ++ ];<br>    <span class=\"hljs-keyword\">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<br>    <span class=\"hljs-keyword\">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br><br>    <span class=\"hljs-keyword\">for</span> (i = l, j = <span class=\"hljs-number\">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"四、逆序对的数量\"><a href=\"#四、逆序对的数量\" class=\"headerlink\" title=\"四、逆序对的数量\"></a>四、逆序对的数量</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">LL <span class=\"hljs-title\">merge_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> q[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br><br>    LL res = <span class=\"hljs-built_in\">merge_sort</span>(q, l, mid) + <span class=\"hljs-built_in\">merge_sort</span>(q, mid + <span class=\"hljs-number\">1</span>, r);<br><br>    <span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>, i = l, j = mid + <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class=\"hljs-keyword\">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            res += mid - i + <span class=\"hljs-number\">1</span>;<br>            tmp[k ++ ] = q[j ++ ];<br>        &#125;<br>    <span class=\"hljs-keyword\">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<br>    <span class=\"hljs-keyword\">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br><br>    <span class=\"hljs-keyword\">for</span> (i = l, j = <span class=\"hljs-number\">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<br><br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"五、二分模板\"><a href=\"#五、二分模板\" class=\"headerlink\" title=\"五、二分模板\"></a>五、二分模板</h1><ol>\n<li>找左边第一个数<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">0</span>, r = n - <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">while</span> (l &lt; r)<br>&#123;<br>    <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span> (q[mid] &gt;= x) r = mid;<br>    <span class=\"hljs-keyword\">else</span> l = mid + <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>找右边第一个数<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">0</span>, r = n - <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">while</span> (l &lt; r)<br>&#123;<br>    <span class=\"hljs-type\">int</span> mid = l + r + <span class=\"hljs-number\">1</span> &gt;&gt; <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span> (q[mid] &lt;= x) l = mid;<br>    <span class=\"hljs-keyword\">else</span> r = mid - <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"六、高精度加法\"><a href=\"#六、高精度加法\" class=\"headerlink\" title=\"六、高精度加法\"></a>六、高精度加法</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;A, vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;B)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (A.<span class=\"hljs-built_in\">size</span>() &lt; B.<span class=\"hljs-built_in\">size</span>()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">add</span>(B, A);<br><br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; C;<br>    <span class=\"hljs-type\">int</span> t = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>(); i ++ )<br>    &#123;<br>        t += A[i];<br>        <span class=\"hljs-keyword\">if</span> (i &lt; B.<span class=\"hljs-built_in\">size</span>()) t += B[i];<br>        C.<span class=\"hljs-built_in\">push_back</span>(t % <span class=\"hljs-number\">10</span>);<br>        t /= <span class=\"hljs-number\">10</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (t) C.<span class=\"hljs-built_in\">push_back</span>(t);<br>    <span class=\"hljs-keyword\">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"七、高精度减法\"><a href=\"#七、高精度减法\" class=\"headerlink\" title=\"七、高精度减法\"></a>七、高精度减法</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;A, vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;B)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (A.<span class=\"hljs-built_in\">size</span>() != B.<span class=\"hljs-built_in\">size</span>()) <span class=\"hljs-keyword\">return</span> A.<span class=\"hljs-built_in\">size</span>() &gt; B.<span class=\"hljs-built_in\">size</span>();<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = A.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i -- )<br>        <span class=\"hljs-keyword\">if</span> (A[i] != B[i])<br>            <span class=\"hljs-keyword\">return</span> A[i] &gt; B[i];<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><br><span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">sub</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;A, vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;B)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; C;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, t = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>(); i ++ )<br>    &#123;<br>        t = A[i] - t;<br>        <span class=\"hljs-keyword\">if</span> (i &lt; B.<span class=\"hljs-built_in\">size</span>()) t -= B[i];<br>        C.<span class=\"hljs-built_in\">push_back</span>((t + <span class=\"hljs-number\">10</span>) % <span class=\"hljs-number\">10</span>);<br>        <span class=\"hljs-keyword\">if</span> (t &lt; <span class=\"hljs-number\">0</span>) t = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">else</span> t = <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">while</span> (C.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> &amp;&amp; C.<span class=\"hljs-built_in\">back</span>() == <span class=\"hljs-number\">0</span>) C.<span class=\"hljs-built_in\">pop_back</span>();<br>    <span class=\"hljs-keyword\">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"八、高精度乘法\"><a href=\"#八、高精度乘法\" class=\"headerlink\" title=\"八、高精度乘法\"></a>八、高精度乘法</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">mul</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;A, <span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; C;<br><br>    <span class=\"hljs-type\">int</span> t = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>() || t; i ++ )<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (i &lt; A.<span class=\"hljs-built_in\">size</span>()) t += A[i] * b;<br>        C.<span class=\"hljs-built_in\">push_back</span>(t % <span class=\"hljs-number\">10</span>);<br>        t /= <span class=\"hljs-number\">10</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">while</span> (C.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> &amp;&amp; C.<span class=\"hljs-built_in\">back</span>() == <span class=\"hljs-number\">0</span>) C.<span class=\"hljs-built_in\">pop_back</span>();<br><br>    <span class=\"hljs-keyword\">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"九、高精度除法\"><a href=\"#九、高精度除法\" class=\"headerlink\" title=\"九、高精度除法\"></a>九、高精度除法</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">div</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;A, <span class=\"hljs-type\">int</span> b, <span class=\"hljs-type\">int</span> &amp;r)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; C;<br>    r = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = A.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i -- )<br>    &#123;<br>        r = r * <span class=\"hljs-number\">10</span> + A[i];<br>        C.<span class=\"hljs-built_in\">push_back</span>(r / b);<br>        r %= b;<br>    &#125;<br>    <span class=\"hljs-built_in\">reverse</span>(C.<span class=\"hljs-built_in\">begin</span>(), C.<span class=\"hljs-built_in\">end</span>());<br>    <span class=\"hljs-keyword\">while</span> (C.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> &amp;&amp; C.<span class=\"hljs-built_in\">back</span>() == <span class=\"hljs-number\">0</span>) C.<span class=\"hljs-built_in\">pop_back</span>();<br>    <span class=\"hljs-keyword\">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"十、前缀和\"><a href=\"#十、前缀和\" class=\"headerlink\" title=\"十、前缀和\"></a>十、前缀和</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;a[i]);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ ) s[i] = s[i - <span class=\"hljs-number\">1</span>] + a[i]; <span class=\"hljs-comment\">// 前缀和的初始化</span><br><br>    <span class=\"hljs-keyword\">while</span> (m -- )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> l, r;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, s[r] - s[l - <span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// 区间和的计算</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"十一、子矩阵的和\"><a href=\"#十一、子矩阵的和\" class=\"headerlink\" title=\"十一、子矩阵的和\"></a>十一、子矩阵的和</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ )<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;s[i][j]);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ )<br>            s[i][j] += s[i - <span class=\"hljs-number\">1</span>][j] + s[i][j - <span class=\"hljs-number\">1</span>] - s[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>];<br><br>    <span class=\"hljs-keyword\">while</span> (q -- )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> x1, y1, x2, y2;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, s[x2][y2] - s[x1 - <span class=\"hljs-number\">1</span>][y2] - s[x2][y1 - <span class=\"hljs-number\">1</span>] + s[x1 - <span class=\"hljs-number\">1</span>][y1 - <span class=\"hljs-number\">1</span>]);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"十二、差分\"><a href=\"#十二、差分\" class=\"headerlink\" title=\"十二、差分\"></a>十二、差分</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> c)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    b[l] += c;<br>    b[r + <span class=\"hljs-number\">1</span>] -= c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;a[i]);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ ) <span class=\"hljs-built_in\">insert</span>(i, i, a[i]);<br><br>    <span class=\"hljs-keyword\">while</span> (m -- )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> l, r, c;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;c);<br>        <span class=\"hljs-built_in\">insert</span>(l, r, c);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ ) b[i] += b[i - <span class=\"hljs-number\">1</span>];<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ ) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, b[i]);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"十三、差分矩阵\"><a href=\"#十三、差分矩阵\" class=\"headerlink\" title=\"十三、差分矩阵\"></a>十三、差分矩阵</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x1, <span class=\"hljs-type\">int</span> y1, <span class=\"hljs-type\">int</span> x2, <span class=\"hljs-type\">int</span> y2, <span class=\"hljs-type\">int</span> c)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    b[x1][y1] += c;<br>    b[x2 + <span class=\"hljs-number\">1</span>][y1] -= c;<br>    b[x1][y2 + <span class=\"hljs-number\">1</span>] -= c;<br>    b[x2 + <span class=\"hljs-number\">1</span>][y2 + <span class=\"hljs-number\">1</span>] += c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ )<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;a[i][j]);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ )<br>            <span class=\"hljs-built_in\">insert</span>(i, j, i, j, a[i][j]);<br><br>    <span class=\"hljs-keyword\">while</span> (q -- )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> x1, y1, x2, y2, c;<br>        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;<br>        <span class=\"hljs-built_in\">insert</span>(x1, y1, x2, y2, c);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ )<br>            b[i][j] += b[i - <span class=\"hljs-number\">1</span>][j] + b[i][j - <span class=\"hljs-number\">1</span>] - b[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>];<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ ) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, b[i][j]);<br>        <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"十四、最长连续不重复子序列-双指针\"><a href=\"#十四、最长连续不重复子序列-双指针\" class=\"headerlink\" title=\"十四、最长连续不重复子序列 (双指针)\"></a>十四、最长连续不重复子序列 (双指针)</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;q[i]);<br><br>    <span class=\"hljs-type\">int</span> res = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        s[q[i]] ++ ;<br>        <span class=\"hljs-keyword\">while</span> (j &lt; i &amp;&amp; s[q[i]] &gt; <span class=\"hljs-number\">1</span>) s[q[j ++ ]] -- ;<br>        res = <span class=\"hljs-built_in\">max</span>(res, i - j + <span class=\"hljs-number\">1</span>);<br>    &#125;<br><br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"十五、数组元素的目标和-双指针\"><a href=\"#十五、数组元素的目标和-双指针\" class=\"headerlink\" title=\"十五、数组元素的目标和 (双指针)\"></a>十五、数组元素的目标和 (双指针)</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;x);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;b[i]);<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, j = m - <span class=\"hljs-number\">1</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; a[i] + b[j] &gt; x) j -- ;<br>        <span class=\"hljs-keyword\">if</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; a[i] + b[j] == x) cout &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&#x27; &#x27;</span> &lt;&lt; j &lt;&lt; endl;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"十六、判断子序列-双指针\"><a href=\"#十六、判断子序列-双指针\" class=\"headerlink\" title=\"十六、判断子序列 (双指针)\"></a>十六、判断子序列 (双指针)</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i ++ ) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;b[i]);<br><br>    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span> (i &lt; n &amp;&amp; j &lt; m)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (a[i] == b[j]) i ++ ;<br>        j ++ ;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (i == n) <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Yes&quot;</span>);<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;No&quot;</span>);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"十七、二进制中1的个数\"><a href=\"#十七、二进制中1的个数\" class=\"headerlink\" title=\"十七、二进制中1的个数\"></a>十七、二进制中1的个数</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);<br>    <span class=\"hljs-keyword\">while</span> (n -- )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> x, s = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;x);<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = x; i; i -= i &amp; -i) s ++ ;<br><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, s);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"十八、区间和\"><a href=\"#十八、区间和\" class=\"headerlink\" title=\"十八、区间和\"></a>十八、区间和</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N = <span class=\"hljs-number\">300010</span>;<br><br><span class=\"hljs-type\">int</span> n, m;<br><span class=\"hljs-type\">int</span> a[N], s[N];<br><br>vector&lt;<span class=\"hljs-type\">int</span>&gt; alls;<br>vector&lt;PII&gt; add, query;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">0</span>, r = alls.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span> (l &lt; r)<br>    &#123;<br>        <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (alls[mid] &gt;= x) r = mid;<br>        <span class=\"hljs-keyword\">else</span> l = mid + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> r + <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> x, c;<br>        cin &gt;&gt; x &gt;&gt; c;<br>        add.<span class=\"hljs-built_in\">push_back</span>(&#123;x, c&#125;);<br><br>        alls.<span class=\"hljs-built_in\">push_back</span>(x);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class=\"hljs-type\">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        query.<span class=\"hljs-built_in\">push_back</span>(&#123;l, r&#125;);<br><br>        alls.<span class=\"hljs-built_in\">push_back</span>(l);<br>        alls.<span class=\"hljs-built_in\">push_back</span>(r);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 去重</span><br>    <span class=\"hljs-built_in\">sort</span>(alls.<span class=\"hljs-built_in\">begin</span>(), alls.<span class=\"hljs-built_in\">end</span>());<br>    alls.<span class=\"hljs-built_in\">erase</span>(<span class=\"hljs-built_in\">unique</span>(alls.<span class=\"hljs-built_in\">begin</span>(), alls.<span class=\"hljs-built_in\">end</span>()), alls.<span class=\"hljs-built_in\">end</span>());<br><br>    <span class=\"hljs-comment\">// 处理插入</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> item : add)<br>    &#123;<br>        <span class=\"hljs-type\">int</span> x = <span class=\"hljs-built_in\">find</span>(item.first);<br>        a[x] += item.second;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 预处理前缀和</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= alls.<span class=\"hljs-built_in\">size</span>(); i ++ ) s[i] = s[i - <span class=\"hljs-number\">1</span>] + a[i];<br><br>    <span class=\"hljs-comment\">// 处理询问</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> item : query)<br>    &#123;<br>        <span class=\"hljs-type\">int</span> l = <span class=\"hljs-built_in\">find</span>(item.first), r = <span class=\"hljs-built_in\">find</span>(item.second);<br>        cout &lt;&lt; s[r] - s[l - <span class=\"hljs-number\">1</span>] &lt;&lt; endl;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"十七、区间合并\"><a href=\"#十七、区间合并\" class=\"headerlink\" title=\"十七、区间合并\"></a>十七、区间合并</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(vector&lt;PII&gt; &amp;segs)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    vector&lt;PII&gt; res;<br><br>    <span class=\"hljs-built_in\">sort</span>(segs.<span class=\"hljs-built_in\">begin</span>(), segs.<span class=\"hljs-built_in\">end</span>());<br><br>    <span class=\"hljs-type\">int</span> st = <span class=\"hljs-number\">-2e9</span>, ed = <span class=\"hljs-number\">-2e9</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> seg : segs)<br>        <span class=\"hljs-keyword\">if</span> (ed &lt; seg.first)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (st != <span class=\"hljs-number\">-2e9</span>) res.<span class=\"hljs-built_in\">push_back</span>(&#123;st, ed&#125;);<br>            st = seg.first, ed = seg.second;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> ed = <span class=\"hljs-built_in\">max</span>(ed, seg.second);<br><br>    <span class=\"hljs-keyword\">if</span> (st != <span class=\"hljs-number\">-2e9</span>) res.<span class=\"hljs-built_in\">push_back</span>(&#123;st, ed&#125;);<br><br>    segs = res;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"并发编程线程基础一","date":"2023-02-15T01:15:54.000Z","description":null,"_content":"## 一、并发编程线程基础\n### 1.什么是进程、线程\n进程是代码在数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，线程则是进程的一个执行路径，一个进程至少有一个线程，进程中的多个线程共享进程的资源。\n>操作系统在分配资源时是把资源分配给进程的，但是 CPU 资源比较特殊，它是分配到线程的，因为真正要占用 CPU 运行的是线程，所以也说线程是 CPU 分配的基本单位。\n\n### 2.线程创建的三种方式\nJava 中有线程创建方式，分别为实现 Runnable 接口的 run 方法，继承 Thread 类并重写 run 方法，使用 FutureTask 方式。\n\n#### 2.1 继承 Thread 类并重写 run 方法\n```java\npublic class ExtendThreadDemo {\n    public static void main(String[] args) {\n        MyThread myThread = new MyThread();\n        /**\n         * 其实调用 start 方法后线程并没有马上执行而 处于就 状态， 这个就绪状态是指\n         * 线程已经获取了除 CPU 资源外的其 资源，等待获取 CPU 资源后才会真正处于运行状态。\n         * 一旦 run 方法执行完毕， 该线程就处于终止状态\n         */\n        myThread.start();\n    }\n\n    public static class MyThread extends Thread{\n        @Override\n        public void run() {\n            System.out.println(\"This a thread's run method.\");\n        }\n    }\n}\n```\n\n\n#### 2.2 实现 Runnable 的 run 方法\n```java\npublic class ImplementRunnableThreadDemo {\n    public static class MyThread implements Runnable {\n\n        @Override\n        public void run() {\n            System.out.println(\"I'm a thread run method.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread myThread = new MyThread();\n        new Thread(myThread).start();\n        new Thread(myThread).start();\n    }\n}\n```\n\n#### 2.3 使用 FutureTask 方式\n```java\npublic class FutureTaskThreadDemo {\n\n    public static class CallerTask implements Callable<String> {\n\n        @Override\n        public String call() throws Exception {\n            return \"violet\";\n        }\n    }\n\n    public static void main(String[] args) {\n        FutureTask<String> futureTask = new FutureTask<String>(new CallerTask()); \n        new Thread(futureTask).start();\n        \n        try {\n            String res = futureTask.get();\n            System.out.println(\"线程执行完成返回结果：\" + res);\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n### 3.线程通知与等待\nJava 中的 Object 类是所有类的父类，鉴于继承机制， Java 把所有类都需要的方法放到了 Object 类里面，其中就包含线程通知与等待系列函数。\n\n#### 3.1 wait() 函数\n当一个线程调用一个共享变量 wait() 方法时, 该调用线程会被阻塞挂起, 到发生下面几件事情之一才返回:\n* 其他线程调用了该共享对象 notify() 或者 notifyAll() 方法\n* 其他线程调用了该线程 interrupt() 方法, 该线程抛出 InterruptedException 异常返回。\n\n>如果调用 wait()方法的线程没有事先获取该对象的监视器锁，则调用 wait() 方法时调用 线程会抛出 IllegalMonitorStateExce ption 异常。\n\n#### 3.2 notify() 函数\n唤醒一个在该共享变量上调用 wait 系列方法后被挂起的线程。\n\n#### 3.3 notifyAll() 函数\n唤醒所有在该共享变量上由于调用 wait 系列方法而被挂起的线程。\n\n#### 3.4等待线程执行终止的 join 方法\n在项目实践中经常会遇到一个场景，就是需要等待某几件事情完成后才能继续往下执行，比如多个线程加载资源，需要等待多个线程全部加载完毕再汇总处理。\n\n#### 3.5 让线程睡眠的 sleep 方法\n当一个执行中的线程调用了 Thread 的 sleep 方法后，调用线程会暂时让出指定时间的执行权，也就是在这期间不参与 CPU 的调度，但是该线程所拥有的监视器资源，比如锁还是持有不让出的。\n\n#### 3.6 让出 CPU 执行权的 yield 方法\nThread 有一个静态的 yield 方法，当一个线程调用 yield 方法时，实际就是在暗示线程调度器当前线程请求让出自己 CPU 使用，但是线程调度器可以无条件忽略这个暗示。\n\n#### 3.7 线程中断\nJava 中的线程中断是一种线程间的协作模式，通过设置线程的中断标志并不能直接终止该线程的执行，而是被中断的线程根据中断状态自行处理。\n\n* **void interrupt()**: 中断线程，例如，当线程 A 运行时，线程 B 可以调用线程 A 的 interrupt() 方法来设置线程 A 的中断标志为 true 并立即返回。设置标志仅仅是设置标志，线程 A 实际并没有被中断，它会继续往下执行。如果线程 A 因为调用了 wait 系列函数、join 方法或者 sleep 方法而被阻塞挂起，这时候若线程 B 调用线程 A 的 interrupt() 方法，线程 A 会在调用这些方法的地方抛出 InterruptedException 异常而返回。\n* **boolean isInterrupted() 方法**: 检测当前线程是否被中断，如果是返回 true, 否则返回 false。  \n* **boolean interrupted() 方法**: 检测当前线程是否被中断，如果是返回 true，否则返回 false。与 isInterrupted 不同的是，该方法如果发现当前线程被中断，则会清除中断标志，并且该方法是 static 方法，可以通过 Thread 类直接调用。另外从下面给的代码可以知道，在 interrupted() 内部是获取当前调用线程的中断标志而不是调用 interrupted() 方法的实例对象的中断标志。\n\n#### 3.8 理解线程上下文切换\n当前线程使用完时间片后，就会处于就绪状态并让出 CPU 让其他线程占有，这就是上下文切换。\n>线程上下文切换时机有：当前线程的 CPU 时间片使用完处于就绪状态时，当前线程被其他线程中断时。\n\n#### 3.9 线程死锁\n##### 3.9.1 什么是线程死锁\n死锁是指两个或两个以上的线程在执行任务过程中，因争夺资源而造成的互相等待的现象。\n\n##### 3.9.2 死锁产生的必要条件\n* 互斥条件：指线程对已经获取到的资源进行排它性使用，即该资源同时只由一个线程占用。如果此时还有其他线程请求获取该资源，则请求者只能等待，直至占有资源的线程释放该资源。\n\n* 请求并持有条件：指一个线程已经持有了至少一个资源，但又提出了新的资源请求，而新资源已被其他线程占有，所有当前线程会被阻塞，但阻塞的同时并不释放自己已经获取的资源。\n\n* 不可剥夺条件：指线程获取到的资源在自己使用完之前不能被其他线程抢占，只有在自己使用完毕后才由自己释放该资源。\n\n* 环路等待条件：指在发生死锁时，必然存在一个线程--资源的环形链，即线程集合{T0，T1，T2，···，Tn}中的 T0 正在等待一个 T1 占用的资源，T1 正在等待 T2 占用的资源，······Tn 正在等待已被 T0 占用的资源。\n\n##### 3.9.3 如何避免线程死锁\n要想避免死锁，只需要破坏掉至少一个构造死锁的必要条件即可，但是学过操作系统的读者应该都知道，目前只有请求并持有和环路等待条件是可以被破坏的。\n\n#### 3.10 守护线程与用户线程\n守护线程是为用户线程服务的，当一个程序中的所有用户线程都执行完成之后程序就会结束运行，程序结束运行时不会管守护线程是否正在运行。\n>即使是守护线程，当程序中调用 join() 方法时，程序依然会等待守护线程执行完成之后再结束进程。\n\n\n### 参考\n* 《Java并发编程之美》","source":"_posts/Java基础知识/多线程/多线程学习篇/并发编程线程基础一.md","raw":"---\ntitle: 并发编程线程基础一\ncategories: [\"Java基础知识\", \"多线程学习\"]\ndate: 2023-02-15 09:15:54\ntags:\ndescription:\n---\n## 一、并发编程线程基础\n### 1.什么是进程、线程\n进程是代码在数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，线程则是进程的一个执行路径，一个进程至少有一个线程，进程中的多个线程共享进程的资源。\n>操作系统在分配资源时是把资源分配给进程的，但是 CPU 资源比较特殊，它是分配到线程的，因为真正要占用 CPU 运行的是线程，所以也说线程是 CPU 分配的基本单位。\n\n### 2.线程创建的三种方式\nJava 中有线程创建方式，分别为实现 Runnable 接口的 run 方法，继承 Thread 类并重写 run 方法，使用 FutureTask 方式。\n\n#### 2.1 继承 Thread 类并重写 run 方法\n```java\npublic class ExtendThreadDemo {\n    public static void main(String[] args) {\n        MyThread myThread = new MyThread();\n        /**\n         * 其实调用 start 方法后线程并没有马上执行而 处于就 状态， 这个就绪状态是指\n         * 线程已经获取了除 CPU 资源外的其 资源，等待获取 CPU 资源后才会真正处于运行状态。\n         * 一旦 run 方法执行完毕， 该线程就处于终止状态\n         */\n        myThread.start();\n    }\n\n    public static class MyThread extends Thread{\n        @Override\n        public void run() {\n            System.out.println(\"This a thread's run method.\");\n        }\n    }\n}\n```\n\n\n#### 2.2 实现 Runnable 的 run 方法\n```java\npublic class ImplementRunnableThreadDemo {\n    public static class MyThread implements Runnable {\n\n        @Override\n        public void run() {\n            System.out.println(\"I'm a thread run method.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread myThread = new MyThread();\n        new Thread(myThread).start();\n        new Thread(myThread).start();\n    }\n}\n```\n\n#### 2.3 使用 FutureTask 方式\n```java\npublic class FutureTaskThreadDemo {\n\n    public static class CallerTask implements Callable<String> {\n\n        @Override\n        public String call() throws Exception {\n            return \"violet\";\n        }\n    }\n\n    public static void main(String[] args) {\n        FutureTask<String> futureTask = new FutureTask<String>(new CallerTask()); \n        new Thread(futureTask).start();\n        \n        try {\n            String res = futureTask.get();\n            System.out.println(\"线程执行完成返回结果：\" + res);\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n### 3.线程通知与等待\nJava 中的 Object 类是所有类的父类，鉴于继承机制， Java 把所有类都需要的方法放到了 Object 类里面，其中就包含线程通知与等待系列函数。\n\n#### 3.1 wait() 函数\n当一个线程调用一个共享变量 wait() 方法时, 该调用线程会被阻塞挂起, 到发生下面几件事情之一才返回:\n* 其他线程调用了该共享对象 notify() 或者 notifyAll() 方法\n* 其他线程调用了该线程 interrupt() 方法, 该线程抛出 InterruptedException 异常返回。\n\n>如果调用 wait()方法的线程没有事先获取该对象的监视器锁，则调用 wait() 方法时调用 线程会抛出 IllegalMonitorStateExce ption 异常。\n\n#### 3.2 notify() 函数\n唤醒一个在该共享变量上调用 wait 系列方法后被挂起的线程。\n\n#### 3.3 notifyAll() 函数\n唤醒所有在该共享变量上由于调用 wait 系列方法而被挂起的线程。\n\n#### 3.4等待线程执行终止的 join 方法\n在项目实践中经常会遇到一个场景，就是需要等待某几件事情完成后才能继续往下执行，比如多个线程加载资源，需要等待多个线程全部加载完毕再汇总处理。\n\n#### 3.5 让线程睡眠的 sleep 方法\n当一个执行中的线程调用了 Thread 的 sleep 方法后，调用线程会暂时让出指定时间的执行权，也就是在这期间不参与 CPU 的调度，但是该线程所拥有的监视器资源，比如锁还是持有不让出的。\n\n#### 3.6 让出 CPU 执行权的 yield 方法\nThread 有一个静态的 yield 方法，当一个线程调用 yield 方法时，实际就是在暗示线程调度器当前线程请求让出自己 CPU 使用，但是线程调度器可以无条件忽略这个暗示。\n\n#### 3.7 线程中断\nJava 中的线程中断是一种线程间的协作模式，通过设置线程的中断标志并不能直接终止该线程的执行，而是被中断的线程根据中断状态自行处理。\n\n* **void interrupt()**: 中断线程，例如，当线程 A 运行时，线程 B 可以调用线程 A 的 interrupt() 方法来设置线程 A 的中断标志为 true 并立即返回。设置标志仅仅是设置标志，线程 A 实际并没有被中断，它会继续往下执行。如果线程 A 因为调用了 wait 系列函数、join 方法或者 sleep 方法而被阻塞挂起，这时候若线程 B 调用线程 A 的 interrupt() 方法，线程 A 会在调用这些方法的地方抛出 InterruptedException 异常而返回。\n* **boolean isInterrupted() 方法**: 检测当前线程是否被中断，如果是返回 true, 否则返回 false。  \n* **boolean interrupted() 方法**: 检测当前线程是否被中断，如果是返回 true，否则返回 false。与 isInterrupted 不同的是，该方法如果发现当前线程被中断，则会清除中断标志，并且该方法是 static 方法，可以通过 Thread 类直接调用。另外从下面给的代码可以知道，在 interrupted() 内部是获取当前调用线程的中断标志而不是调用 interrupted() 方法的实例对象的中断标志。\n\n#### 3.8 理解线程上下文切换\n当前线程使用完时间片后，就会处于就绪状态并让出 CPU 让其他线程占有，这就是上下文切换。\n>线程上下文切换时机有：当前线程的 CPU 时间片使用完处于就绪状态时，当前线程被其他线程中断时。\n\n#### 3.9 线程死锁\n##### 3.9.1 什么是线程死锁\n死锁是指两个或两个以上的线程在执行任务过程中，因争夺资源而造成的互相等待的现象。\n\n##### 3.9.2 死锁产生的必要条件\n* 互斥条件：指线程对已经获取到的资源进行排它性使用，即该资源同时只由一个线程占用。如果此时还有其他线程请求获取该资源，则请求者只能等待，直至占有资源的线程释放该资源。\n\n* 请求并持有条件：指一个线程已经持有了至少一个资源，但又提出了新的资源请求，而新资源已被其他线程占有，所有当前线程会被阻塞，但阻塞的同时并不释放自己已经获取的资源。\n\n* 不可剥夺条件：指线程获取到的资源在自己使用完之前不能被其他线程抢占，只有在自己使用完毕后才由自己释放该资源。\n\n* 环路等待条件：指在发生死锁时，必然存在一个线程--资源的环形链，即线程集合{T0，T1，T2，···，Tn}中的 T0 正在等待一个 T1 占用的资源，T1 正在等待 T2 占用的资源，······Tn 正在等待已被 T0 占用的资源。\n\n##### 3.9.3 如何避免线程死锁\n要想避免死锁，只需要破坏掉至少一个构造死锁的必要条件即可，但是学过操作系统的读者应该都知道，目前只有请求并持有和环路等待条件是可以被破坏的。\n\n#### 3.10 守护线程与用户线程\n守护线程是为用户线程服务的，当一个程序中的所有用户线程都执行完成之后程序就会结束运行，程序结束运行时不会管守护线程是否正在运行。\n>即使是守护线程，当程序中调用 join() 方法时，程序依然会等待守护线程执行完成之后再结束进程。\n\n\n### 参考\n* 《Java并发编程之美》","slug":"Java基础知识/多线程/多线程学习篇/并发编程线程基础一","published":1,"updated":"2023-02-21T04:20:21.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clegsyv7b0002hwtv1s5b5qsr","content":"<h2 id=\"一、并发编程线程基础\"><a href=\"#一、并发编程线程基础\" class=\"headerlink\" title=\"一、并发编程线程基础\"></a>一、并发编程线程基础</h2><h3 id=\"1-什么是进程、线程\"><a href=\"#1-什么是进程、线程\" class=\"headerlink\" title=\"1.什么是进程、线程\"></a>1.什么是进程、线程</h3><p>进程是代码在数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，线程则是进程的一个执行路径，一个进程至少有一个线程，进程中的多个线程共享进程的资源。</p>\n<blockquote>\n<p>操作系统在分配资源时是把资源分配给进程的，但是 CPU 资源比较特殊，它是分配到线程的，因为真正要占用 CPU 运行的是线程，所以也说线程是 CPU 分配的基本单位。</p>\n</blockquote>\n<h3 id=\"2-线程创建的三种方式\"><a href=\"#2-线程创建的三种方式\" class=\"headerlink\" title=\"2.线程创建的三种方式\"></a>2.线程创建的三种方式</h3><p>Java 中有线程创建方式，分别为实现 Runnable 接口的 run 方法，继承 Thread 类并重写 run 方法，使用 FutureTask 方式。</p>\n<h4 id=\"2-1-继承-Thread-类并重写-run-方法\"><a href=\"#2-1-继承-Thread-类并重写-run-方法\" class=\"headerlink\" title=\"2.1 继承 Thread 类并重写 run 方法\"></a>2.1 继承 Thread 类并重写 run 方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExtendThreadDemo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">MyThread</span> <span class=\"hljs-variable\">myThread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThread</span>();<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 其实调用 start 方法后线程并没有马上执行而 处于就 状态， 这个就绪状态是指</span><br><span class=\"hljs-comment\">         * 线程已经获取了除 CPU 资源外的其 资源，等待获取 CPU 资源后才会真正处于运行状态。</span><br><span class=\"hljs-comment\">         * 一旦 run 方法执行完毕， 该线程就处于终止状态</span><br><span class=\"hljs-comment\">         */</span><br>        myThread.start();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThread</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;This a thread&#x27;s run method.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n\n<h4 id=\"2-2-实现-Runnable-的-run-方法\"><a href=\"#2-2-实现-Runnable-的-run-方法\" class=\"headerlink\" title=\"2.2 实现 Runnable 的 run 方法\"></a>2.2 实现 Runnable 的 run 方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ImplementRunnableThreadDemo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThread</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> &#123;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;I&#x27;m a thread run method.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">MyThread</span> <span class=\"hljs-variable\">myThread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThread</span>();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(myThread).start();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(myThread).start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"2-3-使用-FutureTask-方式\"><a href=\"#2-3-使用-FutureTask-方式\" class=\"headerlink\" title=\"2.3 使用 FutureTask 方式\"></a>2.3 使用 FutureTask 方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FutureTaskThreadDemo</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CallerTask</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Callable</span>&lt;String&gt; &#123;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">call</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;violet&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        FutureTask&lt;String&gt; futureTask = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FutureTask</span>&lt;String&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CallerTask</span>()); <br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(futureTask).start();<br>        <br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">res</span> <span class=\"hljs-operator\">=</span> futureTask.get();<br>            System.out.println(<span class=\"hljs-string\">&quot;线程执行完成返回结果：&quot;</span> + res);<br>        &#125; <span class=\"hljs-keyword\">catch</span>(Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"3-线程通知与等待\"><a href=\"#3-线程通知与等待\" class=\"headerlink\" title=\"3.线程通知与等待\"></a>3.线程通知与等待</h3><p>Java 中的 Object 类是所有类的父类，鉴于继承机制， Java 把所有类都需要的方法放到了 Object 类里面，其中就包含线程通知与等待系列函数。</p>\n<h4 id=\"3-1-wait-函数\"><a href=\"#3-1-wait-函数\" class=\"headerlink\" title=\"3.1 wait() 函数\"></a>3.1 wait() 函数</h4><p>当一个线程调用一个共享变量 wait() 方法时, 该调用线程会被阻塞挂起, 到发生下面几件事情之一才返回:</p>\n<ul>\n<li>其他线程调用了该共享对象 notify() 或者 notifyAll() 方法</li>\n<li>其他线程调用了该线程 interrupt() 方法, 该线程抛出 InterruptedException 异常返回。</li>\n</ul>\n<blockquote>\n<p>如果调用 wait()方法的线程没有事先获取该对象的监视器锁，则调用 wait() 方法时调用 线程会抛出 IllegalMonitorStateExce ption 异常。</p>\n</blockquote>\n<h4 id=\"3-2-notify-函数\"><a href=\"#3-2-notify-函数\" class=\"headerlink\" title=\"3.2 notify() 函数\"></a>3.2 notify() 函数</h4><p>唤醒一个在该共享变量上调用 wait 系列方法后被挂起的线程。</p>\n<h4 id=\"3-3-notifyAll-函数\"><a href=\"#3-3-notifyAll-函数\" class=\"headerlink\" title=\"3.3 notifyAll() 函数\"></a>3.3 notifyAll() 函数</h4><p>唤醒所有在该共享变量上由于调用 wait 系列方法而被挂起的线程。</p>\n<h4 id=\"3-4等待线程执行终止的-join-方法\"><a href=\"#3-4等待线程执行终止的-join-方法\" class=\"headerlink\" title=\"3.4等待线程执行终止的 join 方法\"></a>3.4等待线程执行终止的 join 方法</h4><p>在项目实践中经常会遇到一个场景，就是需要等待某几件事情完成后才能继续往下执行，比如多个线程加载资源，需要等待多个线程全部加载完毕再汇总处理。</p>\n<h4 id=\"3-5-让线程睡眠的-sleep-方法\"><a href=\"#3-5-让线程睡眠的-sleep-方法\" class=\"headerlink\" title=\"3.5 让线程睡眠的 sleep 方法\"></a>3.5 让线程睡眠的 sleep 方法</h4><p>当一个执行中的线程调用了 Thread 的 sleep 方法后，调用线程会暂时让出指定时间的执行权，也就是在这期间不参与 CPU 的调度，但是该线程所拥有的监视器资源，比如锁还是持有不让出的。</p>\n<h4 id=\"3-6-让出-CPU-执行权的-yield-方法\"><a href=\"#3-6-让出-CPU-执行权的-yield-方法\" class=\"headerlink\" title=\"3.6 让出 CPU 执行权的 yield 方法\"></a>3.6 让出 CPU 执行权的 yield 方法</h4><p>Thread 有一个静态的 yield 方法，当一个线程调用 yield 方法时，实际就是在暗示线程调度器当前线程请求让出自己 CPU 使用，但是线程调度器可以无条件忽略这个暗示。</p>\n<h4 id=\"3-7-线程中断\"><a href=\"#3-7-线程中断\" class=\"headerlink\" title=\"3.7 线程中断\"></a>3.7 线程中断</h4><p>Java 中的线程中断是一种线程间的协作模式，通过设置线程的中断标志并不能直接终止该线程的执行，而是被中断的线程根据中断状态自行处理。</p>\n<ul>\n<li><strong>void interrupt()</strong>: 中断线程，例如，当线程 A 运行时，线程 B 可以调用线程 A 的 interrupt() 方法来设置线程 A 的中断标志为 true 并立即返回。设置标志仅仅是设置标志，线程 A 实际并没有被中断，它会继续往下执行。如果线程 A 因为调用了 wait 系列函数、join 方法或者 sleep 方法而被阻塞挂起，这时候若线程 B 调用线程 A 的 interrupt() 方法，线程 A 会在调用这些方法的地方抛出 InterruptedException 异常而返回。</li>\n<li><strong>boolean isInterrupted() 方法</strong>: 检测当前线程是否被中断，如果是返回 true, 否则返回 false。  </li>\n<li><strong>boolean interrupted() 方法</strong>: 检测当前线程是否被中断，如果是返回 true，否则返回 false。与 isInterrupted 不同的是，该方法如果发现当前线程被中断，则会清除中断标志，并且该方法是 static 方法，可以通过 Thread 类直接调用。另外从下面给的代码可以知道，在 interrupted() 内部是获取当前调用线程的中断标志而不是调用 interrupted() 方法的实例对象的中断标志。</li>\n</ul>\n<h4 id=\"3-8-理解线程上下文切换\"><a href=\"#3-8-理解线程上下文切换\" class=\"headerlink\" title=\"3.8 理解线程上下文切换\"></a>3.8 理解线程上下文切换</h4><p>当前线程使用完时间片后，就会处于就绪状态并让出 CPU 让其他线程占有，这就是上下文切换。</p>\n<blockquote>\n<p>线程上下文切换时机有：当前线程的 CPU 时间片使用完处于就绪状态时，当前线程被其他线程中断时。</p>\n</blockquote>\n<h4 id=\"3-9-线程死锁\"><a href=\"#3-9-线程死锁\" class=\"headerlink\" title=\"3.9 线程死锁\"></a>3.9 线程死锁</h4><h5 id=\"3-9-1-什么是线程死锁\"><a href=\"#3-9-1-什么是线程死锁\" class=\"headerlink\" title=\"3.9.1 什么是线程死锁\"></a>3.9.1 什么是线程死锁</h5><p>死锁是指两个或两个以上的线程在执行任务过程中，因争夺资源而造成的互相等待的现象。</p>\n<h5 id=\"3-9-2-死锁产生的必要条件\"><a href=\"#3-9-2-死锁产生的必要条件\" class=\"headerlink\" title=\"3.9.2 死锁产生的必要条件\"></a>3.9.2 死锁产生的必要条件</h5><ul>\n<li><p>互斥条件：指线程对已经获取到的资源进行排它性使用，即该资源同时只由一个线程占用。如果此时还有其他线程请求获取该资源，则请求者只能等待，直至占有资源的线程释放该资源。</p>\n</li>\n<li><p>请求并持有条件：指一个线程已经持有了至少一个资源，但又提出了新的资源请求，而新资源已被其他线程占有，所有当前线程会被阻塞，但阻塞的同时并不释放自己已经获取的资源。</p>\n</li>\n<li><p>不可剥夺条件：指线程获取到的资源在自己使用完之前不能被其他线程抢占，只有在自己使用完毕后才由自己释放该资源。</p>\n</li>\n<li><p>环路等待条件：指在发生死锁时，必然存在一个线程–资源的环形链，即线程集合{T0，T1，T2，···，Tn}中的 T0 正在等待一个 T1 占用的资源，T1 正在等待 T2 占用的资源，······Tn 正在等待已被 T0 占用的资源。</p>\n</li>\n</ul>\n<h5 id=\"3-9-3-如何避免线程死锁\"><a href=\"#3-9-3-如何避免线程死锁\" class=\"headerlink\" title=\"3.9.3 如何避免线程死锁\"></a>3.9.3 如何避免线程死锁</h5><p>要想避免死锁，只需要破坏掉至少一个构造死锁的必要条件即可，但是学过操作系统的读者应该都知道，目前只有请求并持有和环路等待条件是可以被破坏的。</p>\n<h4 id=\"3-10-守护线程与用户线程\"><a href=\"#3-10-守护线程与用户线程\" class=\"headerlink\" title=\"3.10 守护线程与用户线程\"></a>3.10 守护线程与用户线程</h4><p>守护线程是为用户线程服务的，当一个程序中的所有用户线程都执行完成之后程序就会结束运行，程序结束运行时不会管守护线程是否正在运行。</p>\n<blockquote>\n<p>即使是守护线程，当程序中调用 join() 方法时，程序依然会等待守护线程执行完成之后再结束进程。</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>《Java并发编程之美》</li>\n</ul>\n","site":{"data":{}},"wordcount":3570,"excerpt":"","more":"<h2 id=\"一、并发编程线程基础\"><a href=\"#一、并发编程线程基础\" class=\"headerlink\" title=\"一、并发编程线程基础\"></a>一、并发编程线程基础</h2><h3 id=\"1-什么是进程、线程\"><a href=\"#1-什么是进程、线程\" class=\"headerlink\" title=\"1.什么是进程、线程\"></a>1.什么是进程、线程</h3><p>进程是代码在数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，线程则是进程的一个执行路径，一个进程至少有一个线程，进程中的多个线程共享进程的资源。</p>\n<blockquote>\n<p>操作系统在分配资源时是把资源分配给进程的，但是 CPU 资源比较特殊，它是分配到线程的，因为真正要占用 CPU 运行的是线程，所以也说线程是 CPU 分配的基本单位。</p>\n</blockquote>\n<h3 id=\"2-线程创建的三种方式\"><a href=\"#2-线程创建的三种方式\" class=\"headerlink\" title=\"2.线程创建的三种方式\"></a>2.线程创建的三种方式</h3><p>Java 中有线程创建方式，分别为实现 Runnable 接口的 run 方法，继承 Thread 类并重写 run 方法，使用 FutureTask 方式。</p>\n<h4 id=\"2-1-继承-Thread-类并重写-run-方法\"><a href=\"#2-1-继承-Thread-类并重写-run-方法\" class=\"headerlink\" title=\"2.1 继承 Thread 类并重写 run 方法\"></a>2.1 继承 Thread 类并重写 run 方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExtendThreadDemo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">MyThread</span> <span class=\"hljs-variable\">myThread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThread</span>();<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 其实调用 start 方法后线程并没有马上执行而 处于就 状态， 这个就绪状态是指</span><br><span class=\"hljs-comment\">         * 线程已经获取了除 CPU 资源外的其 资源，等待获取 CPU 资源后才会真正处于运行状态。</span><br><span class=\"hljs-comment\">         * 一旦 run 方法执行完毕， 该线程就处于终止状态</span><br><span class=\"hljs-comment\">         */</span><br>        myThread.start();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThread</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;This a thread&#x27;s run method.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=\"2-2-实现-Runnable-的-run-方法\"><a href=\"#2-2-实现-Runnable-的-run-方法\" class=\"headerlink\" title=\"2.2 实现 Runnable 的 run 方法\"></a>2.2 实现 Runnable 的 run 方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ImplementRunnableThreadDemo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThread</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> &#123;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;I&#x27;m a thread run method.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">MyThread</span> <span class=\"hljs-variable\">myThread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThread</span>();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(myThread).start();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(myThread).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-使用-FutureTask-方式\"><a href=\"#2-3-使用-FutureTask-方式\" class=\"headerlink\" title=\"2.3 使用 FutureTask 方式\"></a>2.3 使用 FutureTask 方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FutureTaskThreadDemo</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CallerTask</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Callable</span>&lt;String&gt; &#123;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">call</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;violet&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        FutureTask&lt;String&gt; futureTask = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FutureTask</span>&lt;String&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CallerTask</span>()); <br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(futureTask).start();<br>        <br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">res</span> <span class=\"hljs-operator\">=</span> futureTask.get();<br>            System.out.println(<span class=\"hljs-string\">&quot;线程执行完成返回结果：&quot;</span> + res);<br>        &#125; <span class=\"hljs-keyword\">catch</span>(Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"3-线程通知与等待\"><a href=\"#3-线程通知与等待\" class=\"headerlink\" title=\"3.线程通知与等待\"></a>3.线程通知与等待</h3><p>Java 中的 Object 类是所有类的父类，鉴于继承机制， Java 把所有类都需要的方法放到了 Object 类里面，其中就包含线程通知与等待系列函数。</p>\n<h4 id=\"3-1-wait-函数\"><a href=\"#3-1-wait-函数\" class=\"headerlink\" title=\"3.1 wait() 函数\"></a>3.1 wait() 函数</h4><p>当一个线程调用一个共享变量 wait() 方法时, 该调用线程会被阻塞挂起, 到发生下面几件事情之一才返回:</p>\n<ul>\n<li>其他线程调用了该共享对象 notify() 或者 notifyAll() 方法</li>\n<li>其他线程调用了该线程 interrupt() 方法, 该线程抛出 InterruptedException 异常返回。</li>\n</ul>\n<blockquote>\n<p>如果调用 wait()方法的线程没有事先获取该对象的监视器锁，则调用 wait() 方法时调用 线程会抛出 IllegalMonitorStateExce ption 异常。</p>\n</blockquote>\n<h4 id=\"3-2-notify-函数\"><a href=\"#3-2-notify-函数\" class=\"headerlink\" title=\"3.2 notify() 函数\"></a>3.2 notify() 函数</h4><p>唤醒一个在该共享变量上调用 wait 系列方法后被挂起的线程。</p>\n<h4 id=\"3-3-notifyAll-函数\"><a href=\"#3-3-notifyAll-函数\" class=\"headerlink\" title=\"3.3 notifyAll() 函数\"></a>3.3 notifyAll() 函数</h4><p>唤醒所有在该共享变量上由于调用 wait 系列方法而被挂起的线程。</p>\n<h4 id=\"3-4等待线程执行终止的-join-方法\"><a href=\"#3-4等待线程执行终止的-join-方法\" class=\"headerlink\" title=\"3.4等待线程执行终止的 join 方法\"></a>3.4等待线程执行终止的 join 方法</h4><p>在项目实践中经常会遇到一个场景，就是需要等待某几件事情完成后才能继续往下执行，比如多个线程加载资源，需要等待多个线程全部加载完毕再汇总处理。</p>\n<h4 id=\"3-5-让线程睡眠的-sleep-方法\"><a href=\"#3-5-让线程睡眠的-sleep-方法\" class=\"headerlink\" title=\"3.5 让线程睡眠的 sleep 方法\"></a>3.5 让线程睡眠的 sleep 方法</h4><p>当一个执行中的线程调用了 Thread 的 sleep 方法后，调用线程会暂时让出指定时间的执行权，也就是在这期间不参与 CPU 的调度，但是该线程所拥有的监视器资源，比如锁还是持有不让出的。</p>\n<h4 id=\"3-6-让出-CPU-执行权的-yield-方法\"><a href=\"#3-6-让出-CPU-执行权的-yield-方法\" class=\"headerlink\" title=\"3.6 让出 CPU 执行权的 yield 方法\"></a>3.6 让出 CPU 执行权的 yield 方法</h4><p>Thread 有一个静态的 yield 方法，当一个线程调用 yield 方法时，实际就是在暗示线程调度器当前线程请求让出自己 CPU 使用，但是线程调度器可以无条件忽略这个暗示。</p>\n<h4 id=\"3-7-线程中断\"><a href=\"#3-7-线程中断\" class=\"headerlink\" title=\"3.7 线程中断\"></a>3.7 线程中断</h4><p>Java 中的线程中断是一种线程间的协作模式，通过设置线程的中断标志并不能直接终止该线程的执行，而是被中断的线程根据中断状态自行处理。</p>\n<ul>\n<li><strong>void interrupt()</strong>: 中断线程，例如，当线程 A 运行时，线程 B 可以调用线程 A 的 interrupt() 方法来设置线程 A 的中断标志为 true 并立即返回。设置标志仅仅是设置标志，线程 A 实际并没有被中断，它会继续往下执行。如果线程 A 因为调用了 wait 系列函数、join 方法或者 sleep 方法而被阻塞挂起，这时候若线程 B 调用线程 A 的 interrupt() 方法，线程 A 会在调用这些方法的地方抛出 InterruptedException 异常而返回。</li>\n<li><strong>boolean isInterrupted() 方法</strong>: 检测当前线程是否被中断，如果是返回 true, 否则返回 false。  </li>\n<li><strong>boolean interrupted() 方法</strong>: 检测当前线程是否被中断，如果是返回 true，否则返回 false。与 isInterrupted 不同的是，该方法如果发现当前线程被中断，则会清除中断标志，并且该方法是 static 方法，可以通过 Thread 类直接调用。另外从下面给的代码可以知道，在 interrupted() 内部是获取当前调用线程的中断标志而不是调用 interrupted() 方法的实例对象的中断标志。</li>\n</ul>\n<h4 id=\"3-8-理解线程上下文切换\"><a href=\"#3-8-理解线程上下文切换\" class=\"headerlink\" title=\"3.8 理解线程上下文切换\"></a>3.8 理解线程上下文切换</h4><p>当前线程使用完时间片后，就会处于就绪状态并让出 CPU 让其他线程占有，这就是上下文切换。</p>\n<blockquote>\n<p>线程上下文切换时机有：当前线程的 CPU 时间片使用完处于就绪状态时，当前线程被其他线程中断时。</p>\n</blockquote>\n<h4 id=\"3-9-线程死锁\"><a href=\"#3-9-线程死锁\" class=\"headerlink\" title=\"3.9 线程死锁\"></a>3.9 线程死锁</h4><h5 id=\"3-9-1-什么是线程死锁\"><a href=\"#3-9-1-什么是线程死锁\" class=\"headerlink\" title=\"3.9.1 什么是线程死锁\"></a>3.9.1 什么是线程死锁</h5><p>死锁是指两个或两个以上的线程在执行任务过程中，因争夺资源而造成的互相等待的现象。</p>\n<h5 id=\"3-9-2-死锁产生的必要条件\"><a href=\"#3-9-2-死锁产生的必要条件\" class=\"headerlink\" title=\"3.9.2 死锁产生的必要条件\"></a>3.9.2 死锁产生的必要条件</h5><ul>\n<li><p>互斥条件：指线程对已经获取到的资源进行排它性使用，即该资源同时只由一个线程占用。如果此时还有其他线程请求获取该资源，则请求者只能等待，直至占有资源的线程释放该资源。</p>\n</li>\n<li><p>请求并持有条件：指一个线程已经持有了至少一个资源，但又提出了新的资源请求，而新资源已被其他线程占有，所有当前线程会被阻塞，但阻塞的同时并不释放自己已经获取的资源。</p>\n</li>\n<li><p>不可剥夺条件：指线程获取到的资源在自己使用完之前不能被其他线程抢占，只有在自己使用完毕后才由自己释放该资源。</p>\n</li>\n<li><p>环路等待条件：指在发生死锁时，必然存在一个线程–资源的环形链，即线程集合{T0，T1，T2，···，Tn}中的 T0 正在等待一个 T1 占用的资源，T1 正在等待 T2 占用的资源，······Tn 正在等待已被 T0 占用的资源。</p>\n</li>\n</ul>\n<h5 id=\"3-9-3-如何避免线程死锁\"><a href=\"#3-9-3-如何避免线程死锁\" class=\"headerlink\" title=\"3.9.3 如何避免线程死锁\"></a>3.9.3 如何避免线程死锁</h5><p>要想避免死锁，只需要破坏掉至少一个构造死锁的必要条件即可，但是学过操作系统的读者应该都知道，目前只有请求并持有和环路等待条件是可以被破坏的。</p>\n<h4 id=\"3-10-守护线程与用户线程\"><a href=\"#3-10-守护线程与用户线程\" class=\"headerlink\" title=\"3.10 守护线程与用户线程\"></a>3.10 守护线程与用户线程</h4><p>守护线程是为用户线程服务的，当一个程序中的所有用户线程都执行完成之后程序就会结束运行，程序结束运行时不会管守护线程是否正在运行。</p>\n<blockquote>\n<p>即使是守护线程，当程序中调用 join() 方法时，程序依然会等待守护线程执行完成之后再结束进程。</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>《Java并发编程之美》</li>\n</ul>\n"},{"title":"设计模式学习方法","date":"2023-02-14T03:00:00.000Z","description":"设计模式学习方法","_content":"\n## 让大脑就范的方法\n\n* 慢一点，你理解的越多，记得就越少\n* 勤做练习，自己做笔记\n* 阅读 \"There are no Dumb Questions\" 部分\n* 上床睡觉前不要再看别的书本了，或至少不再看其它有难度的东西\n* 要喝水，而且要多喝水\n* 大声说出来\n* 听听你的大脑怎么说\n* 要有点感觉\n* 设计一些东西\n\n参考《HEAD FIRST设计模式 （中文版）》","source":"_posts/理论知识/设计模式/设计模式学习方法.md","raw":"---\ntitle: 设计模式学习方法\ncategories: [\"理论知识\", \"设计模式\"]\ndate: 2023-02-14 11:00:00\ntags: 设计模式\ndescription: 设计模式学习方法\n---\n\n## 让大脑就范的方法\n\n* 慢一点，你理解的越多，记得就越少\n* 勤做练习，自己做笔记\n* 阅读 \"There are no Dumb Questions\" 部分\n* 上床睡觉前不要再看别的书本了，或至少不再看其它有难度的东西\n* 要喝水，而且要多喝水\n* 大声说出来\n* 听听你的大脑怎么说\n* 要有点感觉\n* 设计一些东西\n\n参考《HEAD FIRST设计模式 （中文版）》","slug":"理论知识/设计模式/设计模式学习方法","published":1,"updated":"2023-02-16T08:04:35.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clegsyv7f0004hwtvfu0h69yf","content":"<h2 id=\"让大脑就范的方法\"><a href=\"#让大脑就范的方法\" class=\"headerlink\" title=\"让大脑就范的方法\"></a>让大脑就范的方法</h2><ul>\n<li>慢一点，你理解的越多，记得就越少</li>\n<li>勤做练习，自己做笔记</li>\n<li>阅读 “There are no Dumb Questions” 部分</li>\n<li>上床睡觉前不要再看别的书本了，或至少不再看其它有难度的东西</li>\n<li>要喝水，而且要多喝水</li>\n<li>大声说出来</li>\n<li>听听你的大脑怎么说</li>\n<li>要有点感觉</li>\n<li>设计一些东西</li>\n</ul>\n<p>参考《HEAD FIRST设计模式 （中文版）》</p>\n","site":{"data":{}},"wordcount":149,"excerpt":"","more":"<h2 id=\"让大脑就范的方法\"><a href=\"#让大脑就范的方法\" class=\"headerlink\" title=\"让大脑就范的方法\"></a>让大脑就范的方法</h2><ul>\n<li>慢一点，你理解的越多，记得就越少</li>\n<li>勤做练习，自己做笔记</li>\n<li>阅读 “There are no Dumb Questions” 部分</li>\n<li>上床睡觉前不要再看别的书本了，或至少不再看其它有难度的东西</li>\n<li>要喝水，而且要多喝水</li>\n<li>大声说出来</li>\n<li>听听你的大脑怎么说</li>\n<li>要有点感觉</li>\n<li>设计一些东西</li>\n</ul>\n<p>参考《HEAD FIRST设计模式 （中文版）》</p>\n"},{"title":"并发编程线程基础二","date":"2023-02-17T06:18:17.000Z","description":null,"_content":"### 1.什么是多线程并发编程\n* 并发：并发是指一个时间段内多个任务同时在执行，并且都没有执行结束。\n* 并行：并行是指单位时间内多个任务同时在执行。\n>并发任务强调在一个时间段内同时执行，而一个时间段由多个单位时间累积而成，所以说并发的多个任务在单位时间内不一定同时在执行。\n\n### 2.为什么要进行多线程并发编程\n多核 CPU 时代的到来打破了单核 CPU 对多线程效能的限制。多个 CPU 意味着每个线程可以使用自己的 CPU 运行，这减少了线程上下文的开销，但随着对应用系统性能和吞吐量要求的提高，出现了处理海量数据和请求的要求，这些都对高并发编程有着迫切的需求。\n\n### 3.Java 中的线程安全问题\n线程安全问题是指当多个线程同时读写一个共享资源并且没有任何同步措施时，导致出现脏数据或者其他不可预见的结果的问题。\n\n### 4.Java 中共享变量的内存可见性问题\nJava 内存规模规定，将所有的变量都存放在主内存中，当线程使用变量时，会把主内存里面的变量复制到自己的工作空间或者叫工作内存，线程读写变量时操作的是自己工作内存的变量。\n\n> 多线程情况下会出现内存不可见问题\n\n### 5. Java 中的 synchronized 关键字\n#### 5.1 synchronized 关键字介绍\nsynchronized 块是 Java 提供的一种原子性内置锁，Java 中的每个对象都可以把它当作一个同步锁来使用，这些 Java 内置的使用者看不到的锁被称为内部锁，也叫作监视器锁。\n>线程的执行代码进入 synchronized 代码块前会自动获取内部锁，这时候其他线程访问该同步代码块时会被阻塞挂起。拿到内部锁的线程会在正常退出同步代码块或者抛出异常后或者在同步块内调用了该内置锁资源的 wait 系列方法时释放该内置锁(排他锁)。\n\n>另外，由于 Java 中的线程与操作系统的原生线程一一对应，所以当阻塞一个线城时，需要从用户态切换到内核态执行阻塞操作，这是很耗时的操作，而 synchronized 的使用就会导致上下文切换。\n\n#### 5.2 synchronized 的内存语义\n进入 synchronized 块的语义是把在 synchronized 块内使用到的变量从线程的工作内存中清除，这样在 synchronized 块内使用该变量时就不会从线程的工作内存中获取，而是直接从主内存中获取。退出 synchronized 块的内存语义是把在 synchronized 块内对内存共享变量的修改刷新到主内存。\n>这也是加锁和释放锁的语义，当获取锁后会清空锁块内本地内存中将会被用到的共享变量，在使用这些共享变量时从内存进行加载，在释放时将本地内存中修改的共享变量刷新到主内存。\n\n>除可以解决共享变量内存可见性问题外，synchronized 经常被用来实现原子性操作。另外请注意，synchronized 关键字会引起线程上下文切换带来的线程调度开销。\n\n### 6.Java 中的 volatile 关键字\nvolatile关键字可以确保对一个变量的更新对其他线程马上可见，当一个变量被声明为 volatile 时，线程在写入变量时不会把值缓存在寄存器或者其他地方，而是会把值刷新回主内存。\n>volatile 的内存语义和 synchronized 有相似之处，集体来说就是：当线程写入了 volatile 变量值时就等价于线程退出 synchronized 同步块 (把写入工作内存的变量值同步到主内存)，读取 volatile 变量值时就相当于进入同步块 (先清空本地内存变量值，再从主内存获取最新值)。\n\n>volatile 虽然提供了可见性保证，但并不保证操作的原子性。\n\n什么时候才使用 volatile 关键字：\n* 写入变量不依赖变量的当前值时。\n>因为如果依赖当前值，将是获取--计算--写入三步操作，这三步操作不是原子性的，而 volitile 不保证原子性。\n* 读写变量值时没有加锁。\n>因为加锁本身已经保证了内存可见性，这时候不需要把变量声明为 volitile 的。\n\n### 7.Java 中的原子性操作\n所谓原子性操作，是指执行一系列操作时，这些操作要么全部执行，要么全部不执行，不存在只执行其中一部分的情况。\n\n### 8.Java 中的 CAS 操作\nCAS 即 Compare and Swap，其实是 JDK 提供的非阻塞原子性操作，它通过硬件保证了比较--更新操作的原子性。JDK 里面的 Unsafe 类提供了一系列的 compareAndSwap* 方法，我们以 compareAndSwapLong 方法进行简单介绍。\n* boolean compareAndSwapLong(Object obj, long valueOffeset, long expect, long update) 方法：其中四个参数分别是内存位置、对象中的变量的偏移量、变量预期值和新的值。其操作含义是，如果对象 obj 中内存偏移量为 valueOffset 的变量值为 expect，则使用新的值 update 替换旧的值 expect。\n\n### 9.Unsafe 类\n#### 9.1 Unsafe 类中的重要方法\nJDK 的 rt.jar 包中的 Unsafe 类提供了硬件级别的原子性操作，Unsafe 类中的方法都是 native 方法，它们使用 JNI 的方式访问本地 C++ 实现库。\n\nUsafe 提供的几个主要的方法：\n* **long objectFieldOffset(Field field) 方法：**返回指定的变量在所属类中的内存地址，改偏移地址仅仅在该 Unsafe 函数中访问指定字段时使用。\n* **int arrayBaseOffset(Class arrayClase) 方法：**获取数组中第一个元素的地址。\n* **int arrayIndexScale(Class arrayClass) 方法：**获取数组中一个元素占用的字节。\n* **boolean compareAndSwapLong(Object obj, long offset, long expect, long update) 方法：**比较对象 obj 中偏移量为 offset 的变量的值是否与 expect 相等，相等则使用 update 值更新，然后返回 true，否则返回 false。\n* **public native long getLongVolatile(Object obj, long offse) 方法：**获取对象 obj 中偏移量为 offset 的变量对应 volatile 语义的值。\n* **void putLongVolatile(Object obj, long offset, long value) 方法：**设置 obj 对象中 offset 偏移的类型为 long 的 field 的值为 value，支持 volatile 语义。\n* **void putOrderedLong(Object obj, long offset, long value) 方法：**设置 obj 对象中 offset 偏移地址对应的 long 型 field 的值为 value。这是一个有延迟的方法，并且不保证值修改对其他线程立即可见。只有在变量使用 volatile 修饰并且预计会被意外修改时才使用该方法。\n* **void park(boolean isAbsolute, long time) 方法：**阻塞当前线程，其中参数 isAbsolute 等于 false 且 time 等于 0 表示一直阻塞。time 大于 0 表示等待指定的 time 后阻塞线程会被唤醒，这个 time 是个相对值，是个增量值，也就是相对当前时间累加 time 后当前线程会被唤醒。如果 isAbsolute 等于 true，并且 time 大于 0，则表示阻塞的线程到指定的时间点后会被唤醒，这里 time 是个绝对时间，是将某个时间点换算为 ms 后的值。另外，当其他线程调用了当前阻塞线程的 interrupt 方法而中断了当前线程时，当前线程也会返回，而其他线程调用了 unPark 方法并且把当前线程作为参数时当前线程也会返回。\n* **void unpark(Object thread) 方法：**唤醒调用 park 后阻塞的线程。\n\n下面是 JDK8 新增的函数，这里只列出 Long 类型操作。\n* **long getAndSetLong(Object obj, long offset, long update) 方法：**获取对象 obj 中偏移量为 offset 的变量 volatile 语义的当前值，并设置变量 volatile 语义的值为 update。\n* **long getAndAddLong(Object obj, long offset, long addValue) 方法：**获取对象 obj 中偏移量为 offset 的变量 volatile 语义的当前值，并设置变量值为(原始值 + addValue)。\n\n#### 9.2 如何使用 Unsafe 类\n```java\npublic class TestUnSafe {\n\n    static final Unsafe unsafe;\n\n    static final long stateOffset;\n\n    private volatile long state = 0;\n\n    static {\n\n        try {\n            Field field = Unsafe.class.getDeclaredField(\"theUnsafe\");\n            field.setAccessible(true);\n            unsafe = (Unsafe) field.get(null);\n\n            stateOffset = unsafe.objectFieldOffset(TestUnSafe.class.getDeclaredField(\"state\"));\n        } catch (Exception ex) {\n            System.out.println(ex.getLocalizedMessage());\n            throw new Error(ex);\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        TestUnSafe testUnSafe = new TestUnSafe();\n        boolean success = unsafe.compareAndSwapLong(testUnSafe, stateOffset, 0, 1);\n        System.out.println(success);\n    }\n}\n```\n\n### 10.锁的概述\n#### 10.1 乐观锁与悲观锁\n* **乐观锁：**悲观锁指对数据被外界修改持不保守态度，认为数据不会被其他线程修改，所以在数据被处理前不会对数据进行加锁，并在整个数据处理过程中，是数据处于非锁定状态\n>乐观锁并不会使用数据库提供的锁机制，一般在表中添加 version 字段或者使用业务状态来实现。乐观锁直到提交时才锁定，所以不会产生任何死锁。\n\n* **悲观锁：**悲观锁指对数据被外界修改持保守态度，认为数据很容易就会被其他线程修改，所以在数据被处理前先对数据进行加锁，并在整个数据处理过程中，是数据处于锁定状态\n>悲观锁的实现往往依靠数据库提供的锁机制，即在数据库中，在对数据记录操作前给记录加排它锁。\n\n#### 10.2 公平锁与非公平锁\n* **公平锁：**公平锁表示线程获取锁的顺序是按照线程请求锁的时间早晚决定的，也就是最早请求锁的线程将最早获取到锁。\n* **非公平锁：**在运行时闯入，也就是先来不一定先得。\n\n#### 10.3 独占锁与共享锁\n* **独占锁：**独占锁保证任何时候都只有一个线程能得到锁，ReentrantLock 就是以独占方式实现的。\n>独占锁是一种悲观锁，由于每次访问资源都先加上互斥锁，这限制了并发性，因为读操作并不会影响数据的一致性，而独占锁只允许在同一时间有一个线程读取数据，其他线程必须等待当前线程释放锁才能进行读取。\n* **共享锁：**可以同时由多个线程持有，例如 ReadWriteLock 读写锁，它允许一个资源可以被多线程同时进行读操作。\n共享锁是一种乐观锁，它放宽了加锁的条件，允许多个线程同时进行读操作。\n\n#### 10.4 什么是可重入锁\n可重入锁就是当一个线程获取了锁，可以在一定次数内进入被该锁锁住的代码。\n\n#### 10.5 自旋锁\n* **自旋锁：**当前线程在获取锁时，如果发现锁已经被其他线程占有，它不马上阻塞自己，在不放弃 CPU 使用权的情况下，多次尝试获取(默认次数是 10，可以使用 -XX：PreBlockSpinsh 参数设置该值)。\n>出现自旋锁的原因：由于 Java 中的线程是与操作系统中的线程一一对应的，所以当一个线程在获取锁(比如独占锁)失败后，会被切换到内核状态而被挂起。当该线程获取到锁时又需要将其切换到内核状态而唤醒该线程。而从用户状态切换到内核状态的开销是比较大的，在一定程度上会影响并发性能。\n","source":"_posts/Java基础知识/多线程/多线程学习篇/并发编程线程基础二.md","raw":"---\ntitle: 并发编程线程基础二\ncategories: [\"Java基础知识\", \"多线程学习\"]\ndate: 2023-02-17 14:18:17\ntags: \ndescription:\n---\n### 1.什么是多线程并发编程\n* 并发：并发是指一个时间段内多个任务同时在执行，并且都没有执行结束。\n* 并行：并行是指单位时间内多个任务同时在执行。\n>并发任务强调在一个时间段内同时执行，而一个时间段由多个单位时间累积而成，所以说并发的多个任务在单位时间内不一定同时在执行。\n\n### 2.为什么要进行多线程并发编程\n多核 CPU 时代的到来打破了单核 CPU 对多线程效能的限制。多个 CPU 意味着每个线程可以使用自己的 CPU 运行，这减少了线程上下文的开销，但随着对应用系统性能和吞吐量要求的提高，出现了处理海量数据和请求的要求，这些都对高并发编程有着迫切的需求。\n\n### 3.Java 中的线程安全问题\n线程安全问题是指当多个线程同时读写一个共享资源并且没有任何同步措施时，导致出现脏数据或者其他不可预见的结果的问题。\n\n### 4.Java 中共享变量的内存可见性问题\nJava 内存规模规定，将所有的变量都存放在主内存中，当线程使用变量时，会把主内存里面的变量复制到自己的工作空间或者叫工作内存，线程读写变量时操作的是自己工作内存的变量。\n\n> 多线程情况下会出现内存不可见问题\n\n### 5. Java 中的 synchronized 关键字\n#### 5.1 synchronized 关键字介绍\nsynchronized 块是 Java 提供的一种原子性内置锁，Java 中的每个对象都可以把它当作一个同步锁来使用，这些 Java 内置的使用者看不到的锁被称为内部锁，也叫作监视器锁。\n>线程的执行代码进入 synchronized 代码块前会自动获取内部锁，这时候其他线程访问该同步代码块时会被阻塞挂起。拿到内部锁的线程会在正常退出同步代码块或者抛出异常后或者在同步块内调用了该内置锁资源的 wait 系列方法时释放该内置锁(排他锁)。\n\n>另外，由于 Java 中的线程与操作系统的原生线程一一对应，所以当阻塞一个线城时，需要从用户态切换到内核态执行阻塞操作，这是很耗时的操作，而 synchronized 的使用就会导致上下文切换。\n\n#### 5.2 synchronized 的内存语义\n进入 synchronized 块的语义是把在 synchronized 块内使用到的变量从线程的工作内存中清除，这样在 synchronized 块内使用该变量时就不会从线程的工作内存中获取，而是直接从主内存中获取。退出 synchronized 块的内存语义是把在 synchronized 块内对内存共享变量的修改刷新到主内存。\n>这也是加锁和释放锁的语义，当获取锁后会清空锁块内本地内存中将会被用到的共享变量，在使用这些共享变量时从内存进行加载，在释放时将本地内存中修改的共享变量刷新到主内存。\n\n>除可以解决共享变量内存可见性问题外，synchronized 经常被用来实现原子性操作。另外请注意，synchronized 关键字会引起线程上下文切换带来的线程调度开销。\n\n### 6.Java 中的 volatile 关键字\nvolatile关键字可以确保对一个变量的更新对其他线程马上可见，当一个变量被声明为 volatile 时，线程在写入变量时不会把值缓存在寄存器或者其他地方，而是会把值刷新回主内存。\n>volatile 的内存语义和 synchronized 有相似之处，集体来说就是：当线程写入了 volatile 变量值时就等价于线程退出 synchronized 同步块 (把写入工作内存的变量值同步到主内存)，读取 volatile 变量值时就相当于进入同步块 (先清空本地内存变量值，再从主内存获取最新值)。\n\n>volatile 虽然提供了可见性保证，但并不保证操作的原子性。\n\n什么时候才使用 volatile 关键字：\n* 写入变量不依赖变量的当前值时。\n>因为如果依赖当前值，将是获取--计算--写入三步操作，这三步操作不是原子性的，而 volitile 不保证原子性。\n* 读写变量值时没有加锁。\n>因为加锁本身已经保证了内存可见性，这时候不需要把变量声明为 volitile 的。\n\n### 7.Java 中的原子性操作\n所谓原子性操作，是指执行一系列操作时，这些操作要么全部执行，要么全部不执行，不存在只执行其中一部分的情况。\n\n### 8.Java 中的 CAS 操作\nCAS 即 Compare and Swap，其实是 JDK 提供的非阻塞原子性操作，它通过硬件保证了比较--更新操作的原子性。JDK 里面的 Unsafe 类提供了一系列的 compareAndSwap* 方法，我们以 compareAndSwapLong 方法进行简单介绍。\n* boolean compareAndSwapLong(Object obj, long valueOffeset, long expect, long update) 方法：其中四个参数分别是内存位置、对象中的变量的偏移量、变量预期值和新的值。其操作含义是，如果对象 obj 中内存偏移量为 valueOffset 的变量值为 expect，则使用新的值 update 替换旧的值 expect。\n\n### 9.Unsafe 类\n#### 9.1 Unsafe 类中的重要方法\nJDK 的 rt.jar 包中的 Unsafe 类提供了硬件级别的原子性操作，Unsafe 类中的方法都是 native 方法，它们使用 JNI 的方式访问本地 C++ 实现库。\n\nUsafe 提供的几个主要的方法：\n* **long objectFieldOffset(Field field) 方法：**返回指定的变量在所属类中的内存地址，改偏移地址仅仅在该 Unsafe 函数中访问指定字段时使用。\n* **int arrayBaseOffset(Class arrayClase) 方法：**获取数组中第一个元素的地址。\n* **int arrayIndexScale(Class arrayClass) 方法：**获取数组中一个元素占用的字节。\n* **boolean compareAndSwapLong(Object obj, long offset, long expect, long update) 方法：**比较对象 obj 中偏移量为 offset 的变量的值是否与 expect 相等，相等则使用 update 值更新，然后返回 true，否则返回 false。\n* **public native long getLongVolatile(Object obj, long offse) 方法：**获取对象 obj 中偏移量为 offset 的变量对应 volatile 语义的值。\n* **void putLongVolatile(Object obj, long offset, long value) 方法：**设置 obj 对象中 offset 偏移的类型为 long 的 field 的值为 value，支持 volatile 语义。\n* **void putOrderedLong(Object obj, long offset, long value) 方法：**设置 obj 对象中 offset 偏移地址对应的 long 型 field 的值为 value。这是一个有延迟的方法，并且不保证值修改对其他线程立即可见。只有在变量使用 volatile 修饰并且预计会被意外修改时才使用该方法。\n* **void park(boolean isAbsolute, long time) 方法：**阻塞当前线程，其中参数 isAbsolute 等于 false 且 time 等于 0 表示一直阻塞。time 大于 0 表示等待指定的 time 后阻塞线程会被唤醒，这个 time 是个相对值，是个增量值，也就是相对当前时间累加 time 后当前线程会被唤醒。如果 isAbsolute 等于 true，并且 time 大于 0，则表示阻塞的线程到指定的时间点后会被唤醒，这里 time 是个绝对时间，是将某个时间点换算为 ms 后的值。另外，当其他线程调用了当前阻塞线程的 interrupt 方法而中断了当前线程时，当前线程也会返回，而其他线程调用了 unPark 方法并且把当前线程作为参数时当前线程也会返回。\n* **void unpark(Object thread) 方法：**唤醒调用 park 后阻塞的线程。\n\n下面是 JDK8 新增的函数，这里只列出 Long 类型操作。\n* **long getAndSetLong(Object obj, long offset, long update) 方法：**获取对象 obj 中偏移量为 offset 的变量 volatile 语义的当前值，并设置变量 volatile 语义的值为 update。\n* **long getAndAddLong(Object obj, long offset, long addValue) 方法：**获取对象 obj 中偏移量为 offset 的变量 volatile 语义的当前值，并设置变量值为(原始值 + addValue)。\n\n#### 9.2 如何使用 Unsafe 类\n```java\npublic class TestUnSafe {\n\n    static final Unsafe unsafe;\n\n    static final long stateOffset;\n\n    private volatile long state = 0;\n\n    static {\n\n        try {\n            Field field = Unsafe.class.getDeclaredField(\"theUnsafe\");\n            field.setAccessible(true);\n            unsafe = (Unsafe) field.get(null);\n\n            stateOffset = unsafe.objectFieldOffset(TestUnSafe.class.getDeclaredField(\"state\"));\n        } catch (Exception ex) {\n            System.out.println(ex.getLocalizedMessage());\n            throw new Error(ex);\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        TestUnSafe testUnSafe = new TestUnSafe();\n        boolean success = unsafe.compareAndSwapLong(testUnSafe, stateOffset, 0, 1);\n        System.out.println(success);\n    }\n}\n```\n\n### 10.锁的概述\n#### 10.1 乐观锁与悲观锁\n* **乐观锁：**悲观锁指对数据被外界修改持不保守态度，认为数据不会被其他线程修改，所以在数据被处理前不会对数据进行加锁，并在整个数据处理过程中，是数据处于非锁定状态\n>乐观锁并不会使用数据库提供的锁机制，一般在表中添加 version 字段或者使用业务状态来实现。乐观锁直到提交时才锁定，所以不会产生任何死锁。\n\n* **悲观锁：**悲观锁指对数据被外界修改持保守态度，认为数据很容易就会被其他线程修改，所以在数据被处理前先对数据进行加锁，并在整个数据处理过程中，是数据处于锁定状态\n>悲观锁的实现往往依靠数据库提供的锁机制，即在数据库中，在对数据记录操作前给记录加排它锁。\n\n#### 10.2 公平锁与非公平锁\n* **公平锁：**公平锁表示线程获取锁的顺序是按照线程请求锁的时间早晚决定的，也就是最早请求锁的线程将最早获取到锁。\n* **非公平锁：**在运行时闯入，也就是先来不一定先得。\n\n#### 10.3 独占锁与共享锁\n* **独占锁：**独占锁保证任何时候都只有一个线程能得到锁，ReentrantLock 就是以独占方式实现的。\n>独占锁是一种悲观锁，由于每次访问资源都先加上互斥锁，这限制了并发性，因为读操作并不会影响数据的一致性，而独占锁只允许在同一时间有一个线程读取数据，其他线程必须等待当前线程释放锁才能进行读取。\n* **共享锁：**可以同时由多个线程持有，例如 ReadWriteLock 读写锁，它允许一个资源可以被多线程同时进行读操作。\n共享锁是一种乐观锁，它放宽了加锁的条件，允许多个线程同时进行读操作。\n\n#### 10.4 什么是可重入锁\n可重入锁就是当一个线程获取了锁，可以在一定次数内进入被该锁锁住的代码。\n\n#### 10.5 自旋锁\n* **自旋锁：**当前线程在获取锁时，如果发现锁已经被其他线程占有，它不马上阻塞自己，在不放弃 CPU 使用权的情况下，多次尝试获取(默认次数是 10，可以使用 -XX：PreBlockSpinsh 参数设置该值)。\n>出现自旋锁的原因：由于 Java 中的线程是与操作系统中的线程一一对应的，所以当一个线程在获取锁(比如独占锁)失败后，会被切换到内核状态而被挂起。当该线程获取到锁时又需要将其切换到内核状态而唤醒该线程。而从用户状态切换到内核状态的开销是比较大的，在一定程度上会影响并发性能。\n","slug":"Java基础知识/多线程/多线程学习篇/并发编程线程基础二","published":1,"updated":"2023-02-20T02:03:27.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clegsyv7l0005hwtv26l50k2z","content":"<h3 id=\"1-什么是多线程并发编程\"><a href=\"#1-什么是多线程并发编程\" class=\"headerlink\" title=\"1.什么是多线程并发编程\"></a>1.什么是多线程并发编程</h3><ul>\n<li>并发：并发是指一个时间段内多个任务同时在执行，并且都没有执行结束。</li>\n<li>并行：并行是指单位时间内多个任务同时在执行。<blockquote>\n<p>并发任务强调在一个时间段内同时执行，而一个时间段由多个单位时间累积而成，所以说并发的多个任务在单位时间内不一定同时在执行。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-为什么要进行多线程并发编程\"><a href=\"#2-为什么要进行多线程并发编程\" class=\"headerlink\" title=\"2.为什么要进行多线程并发编程\"></a>2.为什么要进行多线程并发编程</h3><p>多核 CPU 时代的到来打破了单核 CPU 对多线程效能的限制。多个 CPU 意味着每个线程可以使用自己的 CPU 运行，这减少了线程上下文的开销，但随着对应用系统性能和吞吐量要求的提高，出现了处理海量数据和请求的要求，这些都对高并发编程有着迫切的需求。</p>\n<h3 id=\"3-Java-中的线程安全问题\"><a href=\"#3-Java-中的线程安全问题\" class=\"headerlink\" title=\"3.Java 中的线程安全问题\"></a>3.Java 中的线程安全问题</h3><p>线程安全问题是指当多个线程同时读写一个共享资源并且没有任何同步措施时，导致出现脏数据或者其他不可预见的结果的问题。</p>\n<h3 id=\"4-Java-中共享变量的内存可见性问题\"><a href=\"#4-Java-中共享变量的内存可见性问题\" class=\"headerlink\" title=\"4.Java 中共享变量的内存可见性问题\"></a>4.Java 中共享变量的内存可见性问题</h3><p>Java 内存规模规定，将所有的变量都存放在主内存中，当线程使用变量时，会把主内存里面的变量复制到自己的工作空间或者叫工作内存，线程读写变量时操作的是自己工作内存的变量。</p>\n<blockquote>\n<p>多线程情况下会出现内存不可见问题</p>\n</blockquote>\n<h3 id=\"5-Java-中的-synchronized-关键字\"><a href=\"#5-Java-中的-synchronized-关键字\" class=\"headerlink\" title=\"5. Java 中的 synchronized 关键字\"></a>5. Java 中的 synchronized 关键字</h3><h4 id=\"5-1-synchronized-关键字介绍\"><a href=\"#5-1-synchronized-关键字介绍\" class=\"headerlink\" title=\"5.1 synchronized 关键字介绍\"></a>5.1 synchronized 关键字介绍</h4><p>synchronized 块是 Java 提供的一种原子性内置锁，Java 中的每个对象都可以把它当作一个同步锁来使用，这些 Java 内置的使用者看不到的锁被称为内部锁，也叫作监视器锁。</p>\n<blockquote>\n<p>线程的执行代码进入 synchronized 代码块前会自动获取内部锁，这时候其他线程访问该同步代码块时会被阻塞挂起。拿到内部锁的线程会在正常退出同步代码块或者抛出异常后或者在同步块内调用了该内置锁资源的 wait 系列方法时释放该内置锁(排他锁)。</p>\n</blockquote>\n<blockquote>\n<p>另外，由于 Java 中的线程与操作系统的原生线程一一对应，所以当阻塞一个线城时，需要从用户态切换到内核态执行阻塞操作，这是很耗时的操作，而 synchronized 的使用就会导致上下文切换。</p>\n</blockquote>\n<h4 id=\"5-2-synchronized-的内存语义\"><a href=\"#5-2-synchronized-的内存语义\" class=\"headerlink\" title=\"5.2 synchronized 的内存语义\"></a>5.2 synchronized 的内存语义</h4><p>进入 synchronized 块的语义是把在 synchronized 块内使用到的变量从线程的工作内存中清除，这样在 synchronized 块内使用该变量时就不会从线程的工作内存中获取，而是直接从主内存中获取。退出 synchronized 块的内存语义是把在 synchronized 块内对内存共享变量的修改刷新到主内存。</p>\n<blockquote>\n<p>这也是加锁和释放锁的语义，当获取锁后会清空锁块内本地内存中将会被用到的共享变量，在使用这些共享变量时从内存进行加载，在释放时将本地内存中修改的共享变量刷新到主内存。</p>\n</blockquote>\n<blockquote>\n<p>除可以解决共享变量内存可见性问题外，synchronized 经常被用来实现原子性操作。另外请注意，synchronized 关键字会引起线程上下文切换带来的线程调度开销。</p>\n</blockquote>\n<h3 id=\"6-Java-中的-volatile-关键字\"><a href=\"#6-Java-中的-volatile-关键字\" class=\"headerlink\" title=\"6.Java 中的 volatile 关键字\"></a>6.Java 中的 volatile 关键字</h3><p>volatile关键字可以确保对一个变量的更新对其他线程马上可见，当一个变量被声明为 volatile 时，线程在写入变量时不会把值缓存在寄存器或者其他地方，而是会把值刷新回主内存。</p>\n<blockquote>\n<p>volatile 的内存语义和 synchronized 有相似之处，集体来说就是：当线程写入了 volatile 变量值时就等价于线程退出 synchronized 同步块 (把写入工作内存的变量值同步到主内存)，读取 volatile 变量值时就相当于进入同步块 (先清空本地内存变量值，再从主内存获取最新值)。</p>\n</blockquote>\n<blockquote>\n<p>volatile 虽然提供了可见性保证，但并不保证操作的原子性。</p>\n</blockquote>\n<p>什么时候才使用 volatile 关键字：</p>\n<ul>\n<li>写入变量不依赖变量的当前值时。<blockquote>\n<p>因为如果依赖当前值，将是获取–计算–写入三步操作，这三步操作不是原子性的，而 volitile 不保证原子性。</p>\n</blockquote>\n</li>\n<li>读写变量值时没有加锁。<blockquote>\n<p>因为加锁本身已经保证了内存可见性，这时候不需要把变量声明为 volitile 的。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"7-Java-中的原子性操作\"><a href=\"#7-Java-中的原子性操作\" class=\"headerlink\" title=\"7.Java 中的原子性操作\"></a>7.Java 中的原子性操作</h3><p>所谓原子性操作，是指执行一系列操作时，这些操作要么全部执行，要么全部不执行，不存在只执行其中一部分的情况。</p>\n<h3 id=\"8-Java-中的-CAS-操作\"><a href=\"#8-Java-中的-CAS-操作\" class=\"headerlink\" title=\"8.Java 中的 CAS 操作\"></a>8.Java 中的 CAS 操作</h3><p>CAS 即 Compare and Swap，其实是 JDK 提供的非阻塞原子性操作，它通过硬件保证了比较–更新操作的原子性。JDK 里面的 Unsafe 类提供了一系列的 compareAndSwap* 方法，我们以 compareAndSwapLong 方法进行简单介绍。</p>\n<ul>\n<li>boolean compareAndSwapLong(Object obj, long valueOffeset, long expect, long update) 方法：其中四个参数分别是内存位置、对象中的变量的偏移量、变量预期值和新的值。其操作含义是，如果对象 obj 中内存偏移量为 valueOffset 的变量值为 expect，则使用新的值 update 替换旧的值 expect。</li>\n</ul>\n<h3 id=\"9-Unsafe-类\"><a href=\"#9-Unsafe-类\" class=\"headerlink\" title=\"9.Unsafe 类\"></a>9.Unsafe 类</h3><h4 id=\"9-1-Unsafe-类中的重要方法\"><a href=\"#9-1-Unsafe-类中的重要方法\" class=\"headerlink\" title=\"9.1 Unsafe 类中的重要方法\"></a>9.1 Unsafe 类中的重要方法</h4><p>JDK 的 rt.jar 包中的 Unsafe 类提供了硬件级别的原子性操作，Unsafe 类中的方法都是 native 方法，它们使用 JNI 的方式访问本地 C++ 实现库。</p>\n<p>Usafe 提供的几个主要的方法：</p>\n<ul>\n<li><strong>long objectFieldOffset(Field field) 方法：</strong>返回指定的变量在所属类中的内存地址，改偏移地址仅仅在该 Unsafe 函数中访问指定字段时使用。</li>\n<li><strong>int arrayBaseOffset(Class arrayClase) 方法：</strong>获取数组中第一个元素的地址。</li>\n<li><strong>int arrayIndexScale(Class arrayClass) 方法：</strong>获取数组中一个元素占用的字节。</li>\n<li><strong>boolean compareAndSwapLong(Object obj, long offset, long expect, long update) 方法：</strong>比较对象 obj 中偏移量为 offset 的变量的值是否与 expect 相等，相等则使用 update 值更新，然后返回 true，否则返回 false。</li>\n<li><strong>public native long getLongVolatile(Object obj, long offse) 方法：</strong>获取对象 obj 中偏移量为 offset 的变量对应 volatile 语义的值。</li>\n<li><strong>void putLongVolatile(Object obj, long offset, long value) 方法：</strong>设置 obj 对象中 offset 偏移的类型为 long 的 field 的值为 value，支持 volatile 语义。</li>\n<li><strong>void putOrderedLong(Object obj, long offset, long value) 方法：</strong>设置 obj 对象中 offset 偏移地址对应的 long 型 field 的值为 value。这是一个有延迟的方法，并且不保证值修改对其他线程立即可见。只有在变量使用 volatile 修饰并且预计会被意外修改时才使用该方法。</li>\n<li><strong>void park(boolean isAbsolute, long time) 方法：</strong>阻塞当前线程，其中参数 isAbsolute 等于 false 且 time 等于 0 表示一直阻塞。time 大于 0 表示等待指定的 time 后阻塞线程会被唤醒，这个 time 是个相对值，是个增量值，也就是相对当前时间累加 time 后当前线程会被唤醒。如果 isAbsolute 等于 true，并且 time 大于 0，则表示阻塞的线程到指定的时间点后会被唤醒，这里 time 是个绝对时间，是将某个时间点换算为 ms 后的值。另外，当其他线程调用了当前阻塞线程的 interrupt 方法而中断了当前线程时，当前线程也会返回，而其他线程调用了 unPark 方法并且把当前线程作为参数时当前线程也会返回。</li>\n<li><strong>void unpark(Object thread) 方法：</strong>唤醒调用 park 后阻塞的线程。</li>\n</ul>\n<p>下面是 JDK8 新增的函数，这里只列出 Long 类型操作。</p>\n<ul>\n<li><strong>long getAndSetLong(Object obj, long offset, long update) 方法：</strong>获取对象 obj 中偏移量为 offset 的变量 volatile 语义的当前值，并设置变量 volatile 语义的值为 update。</li>\n<li><strong>long getAndAddLong(Object obj, long offset, long addValue) 方法：</strong>获取对象 obj 中偏移量为 offset 的变量 volatile 语义的当前值，并设置变量值为(原始值 + addValue)。</li>\n</ul>\n<h4 id=\"9-2-如何使用-Unsafe-类\"><a href=\"#9-2-如何使用-Unsafe-类\" class=\"headerlink\" title=\"9.2 如何使用 Unsafe 类\"></a>9.2 如何使用 Unsafe 类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestUnSafe</span> &#123;<br><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Unsafe unsafe;<br><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> stateOffset;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">state</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Field</span> <span class=\"hljs-variable\">field</span> <span class=\"hljs-operator\">=</span> Unsafe.class.getDeclaredField(<span class=\"hljs-string\">&quot;theUnsafe&quot;</span>);<br>            field.setAccessible(<span class=\"hljs-literal\">true</span>);<br>            unsafe = (Unsafe) field.get(<span class=\"hljs-literal\">null</span>);<br><br>            stateOffset = unsafe.objectFieldOffset(TestUnSafe.class.getDeclaredField(<span class=\"hljs-string\">&quot;state&quot;</span>));<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception ex) &#123;<br>            System.out.println(ex.getLocalizedMessage());<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(ex);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">TestUnSafe</span> <span class=\"hljs-variable\">testUnSafe</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestUnSafe</span>();<br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">success</span> <span class=\"hljs-operator\">=</span> unsafe.compareAndSwapLong(testUnSafe, stateOffset, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);<br>        System.out.println(success);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"10-锁的概述\"><a href=\"#10-锁的概述\" class=\"headerlink\" title=\"10.锁的概述\"></a>10.锁的概述</h3><h4 id=\"10-1-乐观锁与悲观锁\"><a href=\"#10-1-乐观锁与悲观锁\" class=\"headerlink\" title=\"10.1 乐观锁与悲观锁\"></a>10.1 乐观锁与悲观锁</h4><ul>\n<li><p><strong>乐观锁：</strong>悲观锁指对数据被外界修改持不保守态度，认为数据不会被其他线程修改，所以在数据被处理前不会对数据进行加锁，并在整个数据处理过程中，是数据处于非锁定状态</p>\n<blockquote>\n<p>乐观锁并不会使用数据库提供的锁机制，一般在表中添加 version 字段或者使用业务状态来实现。乐观锁直到提交时才锁定，所以不会产生任何死锁。</p>\n</blockquote>\n</li>\n<li><p><strong>悲观锁：</strong>悲观锁指对数据被外界修改持保守态度，认为数据很容易就会被其他线程修改，所以在数据被处理前先对数据进行加锁，并在整个数据处理过程中，是数据处于锁定状态</p>\n<blockquote>\n<p>悲观锁的实现往往依靠数据库提供的锁机制，即在数据库中，在对数据记录操作前给记录加排它锁。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"10-2-公平锁与非公平锁\"><a href=\"#10-2-公平锁与非公平锁\" class=\"headerlink\" title=\"10.2 公平锁与非公平锁\"></a>10.2 公平锁与非公平锁</h4><ul>\n<li><strong>公平锁：</strong>公平锁表示线程获取锁的顺序是按照线程请求锁的时间早晚决定的，也就是最早请求锁的线程将最早获取到锁。</li>\n<li><strong>非公平锁：</strong>在运行时闯入，也就是先来不一定先得。</li>\n</ul>\n<h4 id=\"10-3-独占锁与共享锁\"><a href=\"#10-3-独占锁与共享锁\" class=\"headerlink\" title=\"10.3 独占锁与共享锁\"></a>10.3 独占锁与共享锁</h4><ul>\n<li><strong>独占锁：</strong>独占锁保证任何时候都只有一个线程能得到锁，ReentrantLock 就是以独占方式实现的。<blockquote>\n<p>独占锁是一种悲观锁，由于每次访问资源都先加上互斥锁，这限制了并发性，因为读操作并不会影响数据的一致性，而独占锁只允许在同一时间有一个线程读取数据，其他线程必须等待当前线程释放锁才能进行读取。</p>\n</blockquote>\n</li>\n<li><strong>共享锁：</strong>可以同时由多个线程持有，例如 ReadWriteLock 读写锁，它允许一个资源可以被多线程同时进行读操作。<br>共享锁是一种乐观锁，它放宽了加锁的条件，允许多个线程同时进行读操作。</li>\n</ul>\n<h4 id=\"10-4-什么是可重入锁\"><a href=\"#10-4-什么是可重入锁\" class=\"headerlink\" title=\"10.4 什么是可重入锁\"></a>10.4 什么是可重入锁</h4><p>可重入锁就是当一个线程获取了锁，可以在一定次数内进入被该锁锁住的代码。</p>\n<h4 id=\"10-5-自旋锁\"><a href=\"#10-5-自旋锁\" class=\"headerlink\" title=\"10.5 自旋锁\"></a>10.5 自旋锁</h4><ul>\n<li><strong>自旋锁：</strong>当前线程在获取锁时，如果发现锁已经被其他线程占有，它不马上阻塞自己，在不放弃 CPU 使用权的情况下，多次尝试获取(默认次数是 10，可以使用 -XX：PreBlockSpinsh 参数设置该值)。<blockquote>\n<p>出现自旋锁的原因：由于 Java 中的线程是与操作系统中的线程一一对应的，所以当一个线程在获取锁(比如独占锁)失败后，会被切换到内核状态而被挂起。当该线程获取到锁时又需要将其切换到内核状态而唤醒该线程。而从用户状态切换到内核状态的开销是比较大的，在一定程度上会影响并发性能。</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":4972,"excerpt":"","more":"<h3 id=\"1-什么是多线程并发编程\"><a href=\"#1-什么是多线程并发编程\" class=\"headerlink\" title=\"1.什么是多线程并发编程\"></a>1.什么是多线程并发编程</h3><ul>\n<li>并发：并发是指一个时间段内多个任务同时在执行，并且都没有执行结束。</li>\n<li>并行：并行是指单位时间内多个任务同时在执行。<blockquote>\n<p>并发任务强调在一个时间段内同时执行，而一个时间段由多个单位时间累积而成，所以说并发的多个任务在单位时间内不一定同时在执行。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-为什么要进行多线程并发编程\"><a href=\"#2-为什么要进行多线程并发编程\" class=\"headerlink\" title=\"2.为什么要进行多线程并发编程\"></a>2.为什么要进行多线程并发编程</h3><p>多核 CPU 时代的到来打破了单核 CPU 对多线程效能的限制。多个 CPU 意味着每个线程可以使用自己的 CPU 运行，这减少了线程上下文的开销，但随着对应用系统性能和吞吐量要求的提高，出现了处理海量数据和请求的要求，这些都对高并发编程有着迫切的需求。</p>\n<h3 id=\"3-Java-中的线程安全问题\"><a href=\"#3-Java-中的线程安全问题\" class=\"headerlink\" title=\"3.Java 中的线程安全问题\"></a>3.Java 中的线程安全问题</h3><p>线程安全问题是指当多个线程同时读写一个共享资源并且没有任何同步措施时，导致出现脏数据或者其他不可预见的结果的问题。</p>\n<h3 id=\"4-Java-中共享变量的内存可见性问题\"><a href=\"#4-Java-中共享变量的内存可见性问题\" class=\"headerlink\" title=\"4.Java 中共享变量的内存可见性问题\"></a>4.Java 中共享变量的内存可见性问题</h3><p>Java 内存规模规定，将所有的变量都存放在主内存中，当线程使用变量时，会把主内存里面的变量复制到自己的工作空间或者叫工作内存，线程读写变量时操作的是自己工作内存的变量。</p>\n<blockquote>\n<p>多线程情况下会出现内存不可见问题</p>\n</blockquote>\n<h3 id=\"5-Java-中的-synchronized-关键字\"><a href=\"#5-Java-中的-synchronized-关键字\" class=\"headerlink\" title=\"5. Java 中的 synchronized 关键字\"></a>5. Java 中的 synchronized 关键字</h3><h4 id=\"5-1-synchronized-关键字介绍\"><a href=\"#5-1-synchronized-关键字介绍\" class=\"headerlink\" title=\"5.1 synchronized 关键字介绍\"></a>5.1 synchronized 关键字介绍</h4><p>synchronized 块是 Java 提供的一种原子性内置锁，Java 中的每个对象都可以把它当作一个同步锁来使用，这些 Java 内置的使用者看不到的锁被称为内部锁，也叫作监视器锁。</p>\n<blockquote>\n<p>线程的执行代码进入 synchronized 代码块前会自动获取内部锁，这时候其他线程访问该同步代码块时会被阻塞挂起。拿到内部锁的线程会在正常退出同步代码块或者抛出异常后或者在同步块内调用了该内置锁资源的 wait 系列方法时释放该内置锁(排他锁)。</p>\n</blockquote>\n<blockquote>\n<p>另外，由于 Java 中的线程与操作系统的原生线程一一对应，所以当阻塞一个线城时，需要从用户态切换到内核态执行阻塞操作，这是很耗时的操作，而 synchronized 的使用就会导致上下文切换。</p>\n</blockquote>\n<h4 id=\"5-2-synchronized-的内存语义\"><a href=\"#5-2-synchronized-的内存语义\" class=\"headerlink\" title=\"5.2 synchronized 的内存语义\"></a>5.2 synchronized 的内存语义</h4><p>进入 synchronized 块的语义是把在 synchronized 块内使用到的变量从线程的工作内存中清除，这样在 synchronized 块内使用该变量时就不会从线程的工作内存中获取，而是直接从主内存中获取。退出 synchronized 块的内存语义是把在 synchronized 块内对内存共享变量的修改刷新到主内存。</p>\n<blockquote>\n<p>这也是加锁和释放锁的语义，当获取锁后会清空锁块内本地内存中将会被用到的共享变量，在使用这些共享变量时从内存进行加载，在释放时将本地内存中修改的共享变量刷新到主内存。</p>\n</blockquote>\n<blockquote>\n<p>除可以解决共享变量内存可见性问题外，synchronized 经常被用来实现原子性操作。另外请注意，synchronized 关键字会引起线程上下文切换带来的线程调度开销。</p>\n</blockquote>\n<h3 id=\"6-Java-中的-volatile-关键字\"><a href=\"#6-Java-中的-volatile-关键字\" class=\"headerlink\" title=\"6.Java 中的 volatile 关键字\"></a>6.Java 中的 volatile 关键字</h3><p>volatile关键字可以确保对一个变量的更新对其他线程马上可见，当一个变量被声明为 volatile 时，线程在写入变量时不会把值缓存在寄存器或者其他地方，而是会把值刷新回主内存。</p>\n<blockquote>\n<p>volatile 的内存语义和 synchronized 有相似之处，集体来说就是：当线程写入了 volatile 变量值时就等价于线程退出 synchronized 同步块 (把写入工作内存的变量值同步到主内存)，读取 volatile 变量值时就相当于进入同步块 (先清空本地内存变量值，再从主内存获取最新值)。</p>\n</blockquote>\n<blockquote>\n<p>volatile 虽然提供了可见性保证，但并不保证操作的原子性。</p>\n</blockquote>\n<p>什么时候才使用 volatile 关键字：</p>\n<ul>\n<li>写入变量不依赖变量的当前值时。<blockquote>\n<p>因为如果依赖当前值，将是获取–计算–写入三步操作，这三步操作不是原子性的，而 volitile 不保证原子性。</p>\n</blockquote>\n</li>\n<li>读写变量值时没有加锁。<blockquote>\n<p>因为加锁本身已经保证了内存可见性，这时候不需要把变量声明为 volitile 的。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"7-Java-中的原子性操作\"><a href=\"#7-Java-中的原子性操作\" class=\"headerlink\" title=\"7.Java 中的原子性操作\"></a>7.Java 中的原子性操作</h3><p>所谓原子性操作，是指执行一系列操作时，这些操作要么全部执行，要么全部不执行，不存在只执行其中一部分的情况。</p>\n<h3 id=\"8-Java-中的-CAS-操作\"><a href=\"#8-Java-中的-CAS-操作\" class=\"headerlink\" title=\"8.Java 中的 CAS 操作\"></a>8.Java 中的 CAS 操作</h3><p>CAS 即 Compare and Swap，其实是 JDK 提供的非阻塞原子性操作，它通过硬件保证了比较–更新操作的原子性。JDK 里面的 Unsafe 类提供了一系列的 compareAndSwap* 方法，我们以 compareAndSwapLong 方法进行简单介绍。</p>\n<ul>\n<li>boolean compareAndSwapLong(Object obj, long valueOffeset, long expect, long update) 方法：其中四个参数分别是内存位置、对象中的变量的偏移量、变量预期值和新的值。其操作含义是，如果对象 obj 中内存偏移量为 valueOffset 的变量值为 expect，则使用新的值 update 替换旧的值 expect。</li>\n</ul>\n<h3 id=\"9-Unsafe-类\"><a href=\"#9-Unsafe-类\" class=\"headerlink\" title=\"9.Unsafe 类\"></a>9.Unsafe 类</h3><h4 id=\"9-1-Unsafe-类中的重要方法\"><a href=\"#9-1-Unsafe-类中的重要方法\" class=\"headerlink\" title=\"9.1 Unsafe 类中的重要方法\"></a>9.1 Unsafe 类中的重要方法</h4><p>JDK 的 rt.jar 包中的 Unsafe 类提供了硬件级别的原子性操作，Unsafe 类中的方法都是 native 方法，它们使用 JNI 的方式访问本地 C++ 实现库。</p>\n<p>Usafe 提供的几个主要的方法：</p>\n<ul>\n<li><strong>long objectFieldOffset(Field field) 方法：</strong>返回指定的变量在所属类中的内存地址，改偏移地址仅仅在该 Unsafe 函数中访问指定字段时使用。</li>\n<li><strong>int arrayBaseOffset(Class arrayClase) 方法：</strong>获取数组中第一个元素的地址。</li>\n<li><strong>int arrayIndexScale(Class arrayClass) 方法：</strong>获取数组中一个元素占用的字节。</li>\n<li><strong>boolean compareAndSwapLong(Object obj, long offset, long expect, long update) 方法：</strong>比较对象 obj 中偏移量为 offset 的变量的值是否与 expect 相等，相等则使用 update 值更新，然后返回 true，否则返回 false。</li>\n<li><strong>public native long getLongVolatile(Object obj, long offse) 方法：</strong>获取对象 obj 中偏移量为 offset 的变量对应 volatile 语义的值。</li>\n<li><strong>void putLongVolatile(Object obj, long offset, long value) 方法：</strong>设置 obj 对象中 offset 偏移的类型为 long 的 field 的值为 value，支持 volatile 语义。</li>\n<li><strong>void putOrderedLong(Object obj, long offset, long value) 方法：</strong>设置 obj 对象中 offset 偏移地址对应的 long 型 field 的值为 value。这是一个有延迟的方法，并且不保证值修改对其他线程立即可见。只有在变量使用 volatile 修饰并且预计会被意外修改时才使用该方法。</li>\n<li><strong>void park(boolean isAbsolute, long time) 方法：</strong>阻塞当前线程，其中参数 isAbsolute 等于 false 且 time 等于 0 表示一直阻塞。time 大于 0 表示等待指定的 time 后阻塞线程会被唤醒，这个 time 是个相对值，是个增量值，也就是相对当前时间累加 time 后当前线程会被唤醒。如果 isAbsolute 等于 true，并且 time 大于 0，则表示阻塞的线程到指定的时间点后会被唤醒，这里 time 是个绝对时间，是将某个时间点换算为 ms 后的值。另外，当其他线程调用了当前阻塞线程的 interrupt 方法而中断了当前线程时，当前线程也会返回，而其他线程调用了 unPark 方法并且把当前线程作为参数时当前线程也会返回。</li>\n<li><strong>void unpark(Object thread) 方法：</strong>唤醒调用 park 后阻塞的线程。</li>\n</ul>\n<p>下面是 JDK8 新增的函数，这里只列出 Long 类型操作。</p>\n<ul>\n<li><strong>long getAndSetLong(Object obj, long offset, long update) 方法：</strong>获取对象 obj 中偏移量为 offset 的变量 volatile 语义的当前值，并设置变量 volatile 语义的值为 update。</li>\n<li><strong>long getAndAddLong(Object obj, long offset, long addValue) 方法：</strong>获取对象 obj 中偏移量为 offset 的变量 volatile 语义的当前值，并设置变量值为(原始值 + addValue)。</li>\n</ul>\n<h4 id=\"9-2-如何使用-Unsafe-类\"><a href=\"#9-2-如何使用-Unsafe-类\" class=\"headerlink\" title=\"9.2 如何使用 Unsafe 类\"></a>9.2 如何使用 Unsafe 类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestUnSafe</span> &#123;<br><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Unsafe unsafe;<br><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> stateOffset;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">state</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Field</span> <span class=\"hljs-variable\">field</span> <span class=\"hljs-operator\">=</span> Unsafe.class.getDeclaredField(<span class=\"hljs-string\">&quot;theUnsafe&quot;</span>);<br>            field.setAccessible(<span class=\"hljs-literal\">true</span>);<br>            unsafe = (Unsafe) field.get(<span class=\"hljs-literal\">null</span>);<br><br>            stateOffset = unsafe.objectFieldOffset(TestUnSafe.class.getDeclaredField(<span class=\"hljs-string\">&quot;state&quot;</span>));<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception ex) &#123;<br>            System.out.println(ex.getLocalizedMessage());<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(ex);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">TestUnSafe</span> <span class=\"hljs-variable\">testUnSafe</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestUnSafe</span>();<br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">success</span> <span class=\"hljs-operator\">=</span> unsafe.compareAndSwapLong(testUnSafe, stateOffset, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);<br>        System.out.println(success);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"10-锁的概述\"><a href=\"#10-锁的概述\" class=\"headerlink\" title=\"10.锁的概述\"></a>10.锁的概述</h3><h4 id=\"10-1-乐观锁与悲观锁\"><a href=\"#10-1-乐观锁与悲观锁\" class=\"headerlink\" title=\"10.1 乐观锁与悲观锁\"></a>10.1 乐观锁与悲观锁</h4><ul>\n<li><p><strong>乐观锁：</strong>悲观锁指对数据被外界修改持不保守态度，认为数据不会被其他线程修改，所以在数据被处理前不会对数据进行加锁，并在整个数据处理过程中，是数据处于非锁定状态</p>\n<blockquote>\n<p>乐观锁并不会使用数据库提供的锁机制，一般在表中添加 version 字段或者使用业务状态来实现。乐观锁直到提交时才锁定，所以不会产生任何死锁。</p>\n</blockquote>\n</li>\n<li><p><strong>悲观锁：</strong>悲观锁指对数据被外界修改持保守态度，认为数据很容易就会被其他线程修改，所以在数据被处理前先对数据进行加锁，并在整个数据处理过程中，是数据处于锁定状态</p>\n<blockquote>\n<p>悲观锁的实现往往依靠数据库提供的锁机制，即在数据库中，在对数据记录操作前给记录加排它锁。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"10-2-公平锁与非公平锁\"><a href=\"#10-2-公平锁与非公平锁\" class=\"headerlink\" title=\"10.2 公平锁与非公平锁\"></a>10.2 公平锁与非公平锁</h4><ul>\n<li><strong>公平锁：</strong>公平锁表示线程获取锁的顺序是按照线程请求锁的时间早晚决定的，也就是最早请求锁的线程将最早获取到锁。</li>\n<li><strong>非公平锁：</strong>在运行时闯入，也就是先来不一定先得。</li>\n</ul>\n<h4 id=\"10-3-独占锁与共享锁\"><a href=\"#10-3-独占锁与共享锁\" class=\"headerlink\" title=\"10.3 独占锁与共享锁\"></a>10.3 独占锁与共享锁</h4><ul>\n<li><strong>独占锁：</strong>独占锁保证任何时候都只有一个线程能得到锁，ReentrantLock 就是以独占方式实现的。<blockquote>\n<p>独占锁是一种悲观锁，由于每次访问资源都先加上互斥锁，这限制了并发性，因为读操作并不会影响数据的一致性，而独占锁只允许在同一时间有一个线程读取数据，其他线程必须等待当前线程释放锁才能进行读取。</p>\n</blockquote>\n</li>\n<li><strong>共享锁：</strong>可以同时由多个线程持有，例如 ReadWriteLock 读写锁，它允许一个资源可以被多线程同时进行读操作。<br>共享锁是一种乐观锁，它放宽了加锁的条件，允许多个线程同时进行读操作。</li>\n</ul>\n<h4 id=\"10-4-什么是可重入锁\"><a href=\"#10-4-什么是可重入锁\" class=\"headerlink\" title=\"10.4 什么是可重入锁\"></a>10.4 什么是可重入锁</h4><p>可重入锁就是当一个线程获取了锁，可以在一定次数内进入被该锁锁住的代码。</p>\n<h4 id=\"10-5-自旋锁\"><a href=\"#10-5-自旋锁\" class=\"headerlink\" title=\"10.5 自旋锁\"></a>10.5 自旋锁</h4><ul>\n<li><strong>自旋锁：</strong>当前线程在获取锁时，如果发现锁已经被其他线程占有，它不马上阻塞自己，在不放弃 CPU 使用权的情况下，多次尝试获取(默认次数是 10，可以使用 -XX：PreBlockSpinsh 参数设置该值)。<blockquote>\n<p>出现自旋锁的原因：由于 Java 中的线程是与操作系统中的线程一一对应的，所以当一个线程在获取锁(比如独占锁)失败后，会被切换到内核状态而被挂起。当该线程获取到锁时又需要将其切换到内核状态而唤醒该线程。而从用户状态切换到内核状态的开销是比较大的，在一定程度上会影响并发性能。</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"学习过程中陌生的单词","date":"2023-02-14T03:57:25.000Z","description":"学习过程中陌生的单词。","_content":"\n* decoy：n.诱饵 v.引诱\n* differ：vi.不同\n* counterpart：n.对应方; 职位(或作用)相当的人\n* independent: adj.独立的\n* typical：adj.典型的\n* assign: vt.分派；委派\n* invoke：vt.提出；调用\n* subsequent: adj.后来的; 随后的;\n* implicit: adj.含蓄的，无疑问的\n* as long as：只要；和...一样长\n* access：n.通道；vt.访问，到达\n* subject：n.主题；vt.使...臣服；adj.可能受...的影响\n* garbage：n.(生活)垃圾；垃圾桶\n* probe：v.探查；追问；n.探究\n* linear：adj.线性的，直线的\n* inheritable: adj.可遗传的\n* custom：n.风俗，习性；adj.定做的\n* collision：n.碰撞；（两人之间或对立意见、看法等之间的）冲突\n* eliminate：vt.消除，排除\n* consecutive：adj.连续的\n* behave：v.表现，举止\n* sequential：adj.连续的，按次序的；\n* optimal：adj.最优的，最佳的\n* multiplicative：n.乘法；adj.增加的；倍增的\n* in which：在其中；在...其中；\n* anonymous：adj.匿名的\n* threshold：n.门槛，阈，界\n* expunge：vt.消除，消去\n* stale: adj.陈腐的；不新鲜的；n.(牛马、骆驼)尿；vt.使陈旧\n* solely：adv.唯一地；仅；只；\n* concurrent: adj.同时发生的; n.共存物\n* priority：n.优先；优先权\n* allocate: vt.分配\n* prime: adj.首要的；n.盛年；\n* purpose：n.意图；目的；vt.有意；打算\n* pertain：vi.适合\n* indicate：v.表明；暗示\n* hint: n.暗示；征兆；v.暗示\n* yield：n.产量；利润；v.屈服；提供\n* heuristic：adj.(教学或教育)启发式的\n* improve：v.改善；改进\n* relative：adj.相对的；比较的；n.亲戚；亲属；同类事物\n* otherwise：否则\n* utilise：vt.利用；使用\n* combine：v.结合；联合；n.集团\n* profile: n.简介；概述；vt.概述\n* benchmark: n.基准；vt.检测(用基准问题测试)\n* appropriate：适合的；恰当的；vt.盗用；挪用；占用\n* reproduce：v.复制；繁殖；\n* specify：vt.具体说明；详述\n* precision：n.精确；细致；adj.精确的；\n* accuracy：n.精确(程度)；准确(性)\n* ownership：n.所有权\n* negative：adj.消极的；负面的；n.否定；vt.否定；拒绝\n* supply：n.供给；供应；v.提供\n* persistent：adj.执着的；不屈不挠的\n* conceptual：adj.概念(上)的；\n* isolate：v.使隔离 n.孤僻者 adj.孤僻的\n* internal: adj.里面的，内部的；n.内脏，本质\n* encounter：vt.遭遇\n* contention：n.争吵；争论\n* particular：adj.特别的；n.细节；详情\n* appropriate：adj.适当的，合适的\n* parallel：adj.平行的，并行的；\n* Usage：n.(词语的)用法；惯用法\n* accident：n.意外\n* relate: vt.使有联系\n* represent：v.代表\n* carry out：进行，实行\n* maintain：vt.保持\n* manipulate：vt.操纵，影响\n* appropriate：adj.适当的，合适的 vt.盗用\n* ","source":"_posts/Java基础知识/多线程/学习过程中陌生的单词/学习过程中陌生的单词.md","raw":"---\ntitle: 学习过程中陌生的单词\ncategories: [\"单词学习\"]\ndate: 2023-02-14 11:57:25\ntags: 单词学习\ndescription: 学习过程中陌生的单词。\n---\n\n* decoy：n.诱饵 v.引诱\n* differ：vi.不同\n* counterpart：n.对应方; 职位(或作用)相当的人\n* independent: adj.独立的\n* typical：adj.典型的\n* assign: vt.分派；委派\n* invoke：vt.提出；调用\n* subsequent: adj.后来的; 随后的;\n* implicit: adj.含蓄的，无疑问的\n* as long as：只要；和...一样长\n* access：n.通道；vt.访问，到达\n* subject：n.主题；vt.使...臣服；adj.可能受...的影响\n* garbage：n.(生活)垃圾；垃圾桶\n* probe：v.探查；追问；n.探究\n* linear：adj.线性的，直线的\n* inheritable: adj.可遗传的\n* custom：n.风俗，习性；adj.定做的\n* collision：n.碰撞；（两人之间或对立意见、看法等之间的）冲突\n* eliminate：vt.消除，排除\n* consecutive：adj.连续的\n* behave：v.表现，举止\n* sequential：adj.连续的，按次序的；\n* optimal：adj.最优的，最佳的\n* multiplicative：n.乘法；adj.增加的；倍增的\n* in which：在其中；在...其中；\n* anonymous：adj.匿名的\n* threshold：n.门槛，阈，界\n* expunge：vt.消除，消去\n* stale: adj.陈腐的；不新鲜的；n.(牛马、骆驼)尿；vt.使陈旧\n* solely：adv.唯一地；仅；只；\n* concurrent: adj.同时发生的; n.共存物\n* priority：n.优先；优先权\n* allocate: vt.分配\n* prime: adj.首要的；n.盛年；\n* purpose：n.意图；目的；vt.有意；打算\n* pertain：vi.适合\n* indicate：v.表明；暗示\n* hint: n.暗示；征兆；v.暗示\n* yield：n.产量；利润；v.屈服；提供\n* heuristic：adj.(教学或教育)启发式的\n* improve：v.改善；改进\n* relative：adj.相对的；比较的；n.亲戚；亲属；同类事物\n* otherwise：否则\n* utilise：vt.利用；使用\n* combine：v.结合；联合；n.集团\n* profile: n.简介；概述；vt.概述\n* benchmark: n.基准；vt.检测(用基准问题测试)\n* appropriate：适合的；恰当的；vt.盗用；挪用；占用\n* reproduce：v.复制；繁殖；\n* specify：vt.具体说明；详述\n* precision：n.精确；细致；adj.精确的；\n* accuracy：n.精确(程度)；准确(性)\n* ownership：n.所有权\n* negative：adj.消极的；负面的；n.否定；vt.否定；拒绝\n* supply：n.供给；供应；v.提供\n* persistent：adj.执着的；不屈不挠的\n* conceptual：adj.概念(上)的；\n* isolate：v.使隔离 n.孤僻者 adj.孤僻的\n* internal: adj.里面的，内部的；n.内脏，本质\n* encounter：vt.遭遇\n* contention：n.争吵；争论\n* particular：adj.特别的；n.细节；详情\n* appropriate：adj.适当的，合适的\n* parallel：adj.平行的，并行的；\n* Usage：n.(词语的)用法；惯用法\n* accident：n.意外\n* relate: vt.使有联系\n* represent：v.代表\n* carry out：进行，实行\n* maintain：vt.保持\n* manipulate：vt.操纵，影响\n* appropriate：adj.适当的，合适的 vt.盗用\n* ","slug":"Java基础知识/多线程/学习过程中陌生的单词/学习过程中陌生的单词","published":1,"updated":"2023-02-22T03:19:49.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clegsyv7n0007hwtv6p9i1kzw","content":"<ul>\n<li>decoy：n.诱饵 v.引诱</li>\n<li>differ：vi.不同</li>\n<li>counterpart：n.对应方; 职位(或作用)相当的人</li>\n<li>independent: adj.独立的</li>\n<li>typical：adj.典型的</li>\n<li>assign: vt.分派；委派</li>\n<li>invoke：vt.提出；调用</li>\n<li>subsequent: adj.后来的; 随后的;</li>\n<li>implicit: adj.含蓄的，无疑问的</li>\n<li>as long as：只要；和…一样长</li>\n<li>access：n.通道；vt.访问，到达</li>\n<li>subject：n.主题；vt.使…臣服；adj.可能受…的影响</li>\n<li>garbage：n.(生活)垃圾；垃圾桶</li>\n<li>probe：v.探查；追问；n.探究</li>\n<li>linear：adj.线性的，直线的</li>\n<li>inheritable: adj.可遗传的</li>\n<li>custom：n.风俗，习性；adj.定做的</li>\n<li>collision：n.碰撞；（两人之间或对立意见、看法等之间的）冲突</li>\n<li>eliminate：vt.消除，排除</li>\n<li>consecutive：adj.连续的</li>\n<li>behave：v.表现，举止</li>\n<li>sequential：adj.连续的，按次序的；</li>\n<li>optimal：adj.最优的，最佳的</li>\n<li>multiplicative：n.乘法；adj.增加的；倍增的</li>\n<li>in which：在其中；在…其中；</li>\n<li>anonymous：adj.匿名的</li>\n<li>threshold：n.门槛，阈，界</li>\n<li>expunge：vt.消除，消去</li>\n<li>stale: adj.陈腐的；不新鲜的；n.(牛马、骆驼)尿；vt.使陈旧</li>\n<li>solely：adv.唯一地；仅；只；</li>\n<li>concurrent: adj.同时发生的; n.共存物</li>\n<li>priority：n.优先；优先权</li>\n<li>allocate: vt.分配</li>\n<li>prime: adj.首要的；n.盛年；</li>\n<li>purpose：n.意图；目的；vt.有意；打算</li>\n<li>pertain：vi.适合</li>\n<li>indicate：v.表明；暗示</li>\n<li>hint: n.暗示；征兆；v.暗示</li>\n<li>yield：n.产量；利润；v.屈服；提供</li>\n<li>heuristic：adj.(教学或教育)启发式的</li>\n<li>improve：v.改善；改进</li>\n<li>relative：adj.相对的；比较的；n.亲戚；亲属；同类事物</li>\n<li>otherwise：否则</li>\n<li>utilise：vt.利用；使用</li>\n<li>combine：v.结合；联合；n.集团</li>\n<li>profile: n.简介；概述；vt.概述</li>\n<li>benchmark: n.基准；vt.检测(用基准问题测试)</li>\n<li>appropriate：适合的；恰当的；vt.盗用；挪用；占用</li>\n<li>reproduce：v.复制；繁殖；</li>\n<li>specify：vt.具体说明；详述</li>\n<li>precision：n.精确；细致；adj.精确的；</li>\n<li>accuracy：n.精确(程度)；准确(性)</li>\n<li>ownership：n.所有权</li>\n<li>negative：adj.消极的；负面的；n.否定；vt.否定；拒绝</li>\n<li>supply：n.供给；供应；v.提供</li>\n<li>persistent：adj.执着的；不屈不挠的</li>\n<li>conceptual：adj.概念(上)的；</li>\n<li>isolate：v.使隔离 n.孤僻者 adj.孤僻的</li>\n<li>internal: adj.里面的，内部的；n.内脏，本质</li>\n<li>encounter：vt.遭遇</li>\n<li>contention：n.争吵；争论</li>\n<li>particular：adj.特别的；n.细节；详情</li>\n<li>appropriate：adj.适当的，合适的</li>\n<li>parallel：adj.平行的，并行的；</li>\n<li>Usage：n.(词语的)用法；惯用法</li>\n<li>accident：n.意外</li>\n<li>relate: vt.使有联系</li>\n<li>represent：v.代表</li>\n<li>carry out：进行，实行</li>\n<li>maintain：vt.保持</li>\n<li>manipulate：vt.操纵，影响</li>\n<li>appropriate：adj.适当的，合适的 vt.盗用</li>\n<li></li>\n</ul>\n","site":{"data":{}},"wordcount":1472,"excerpt":"","more":"<ul>\n<li>decoy：n.诱饵 v.引诱</li>\n<li>differ：vi.不同</li>\n<li>counterpart：n.对应方; 职位(或作用)相当的人</li>\n<li>independent: adj.独立的</li>\n<li>typical：adj.典型的</li>\n<li>assign: vt.分派；委派</li>\n<li>invoke：vt.提出；调用</li>\n<li>subsequent: adj.后来的; 随后的;</li>\n<li>implicit: adj.含蓄的，无疑问的</li>\n<li>as long as：只要；和…一样长</li>\n<li>access：n.通道；vt.访问，到达</li>\n<li>subject：n.主题；vt.使…臣服；adj.可能受…的影响</li>\n<li>garbage：n.(生活)垃圾；垃圾桶</li>\n<li>probe：v.探查；追问；n.探究</li>\n<li>linear：adj.线性的，直线的</li>\n<li>inheritable: adj.可遗传的</li>\n<li>custom：n.风俗，习性；adj.定做的</li>\n<li>collision：n.碰撞；（两人之间或对立意见、看法等之间的）冲突</li>\n<li>eliminate：vt.消除，排除</li>\n<li>consecutive：adj.连续的</li>\n<li>behave：v.表现，举止</li>\n<li>sequential：adj.连续的，按次序的；</li>\n<li>optimal：adj.最优的，最佳的</li>\n<li>multiplicative：n.乘法；adj.增加的；倍增的</li>\n<li>in which：在其中；在…其中；</li>\n<li>anonymous：adj.匿名的</li>\n<li>threshold：n.门槛，阈，界</li>\n<li>expunge：vt.消除，消去</li>\n<li>stale: adj.陈腐的；不新鲜的；n.(牛马、骆驼)尿；vt.使陈旧</li>\n<li>solely：adv.唯一地；仅；只；</li>\n<li>concurrent: adj.同时发生的; n.共存物</li>\n<li>priority：n.优先；优先权</li>\n<li>allocate: vt.分配</li>\n<li>prime: adj.首要的；n.盛年；</li>\n<li>purpose：n.意图；目的；vt.有意；打算</li>\n<li>pertain：vi.适合</li>\n<li>indicate：v.表明；暗示</li>\n<li>hint: n.暗示；征兆；v.暗示</li>\n<li>yield：n.产量；利润；v.屈服；提供</li>\n<li>heuristic：adj.(教学或教育)启发式的</li>\n<li>improve：v.改善；改进</li>\n<li>relative：adj.相对的；比较的；n.亲戚；亲属；同类事物</li>\n<li>otherwise：否则</li>\n<li>utilise：vt.利用；使用</li>\n<li>combine：v.结合；联合；n.集团</li>\n<li>profile: n.简介；概述；vt.概述</li>\n<li>benchmark: n.基准；vt.检测(用基准问题测试)</li>\n<li>appropriate：适合的；恰当的；vt.盗用；挪用；占用</li>\n<li>reproduce：v.复制；繁殖；</li>\n<li>specify：vt.具体说明；详述</li>\n<li>precision：n.精确；细致；adj.精确的；</li>\n<li>accuracy：n.精确(程度)；准确(性)</li>\n<li>ownership：n.所有权</li>\n<li>negative：adj.消极的；负面的；n.否定；vt.否定；拒绝</li>\n<li>supply：n.供给；供应；v.提供</li>\n<li>persistent：adj.执着的；不屈不挠的</li>\n<li>conceptual：adj.概念(上)的；</li>\n<li>isolate：v.使隔离 n.孤僻者 adj.孤僻的</li>\n<li>internal: adj.里面的，内部的；n.内脏，本质</li>\n<li>encounter：vt.遭遇</li>\n<li>contention：n.争吵；争论</li>\n<li>particular：adj.特别的；n.细节；详情</li>\n<li>appropriate：adj.适当的，合适的</li>\n<li>parallel：adj.平行的，并行的；</li>\n<li>Usage：n.(词语的)用法；惯用法</li>\n<li>accident：n.意外</li>\n<li>relate: vt.使有联系</li>\n<li>represent：v.代表</li>\n<li>carry out：进行，实行</li>\n<li>maintain：vt.保持</li>\n<li>manipulate：vt.操纵，影响</li>\n<li>appropriate：adj.适当的，合适的 vt.盗用</li>\n<li></li>\n</ul>\n"},{"title":"行为型模式-策略模式","date":"2023-02-14T03:01:16.000Z","description":"关于设计模式中的策略模式的探索。","_content":"## 一、 定义\n策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。\n\n## ","source":"_posts/理论知识/设计模式/行为型模式/设计模式.md","raw":"---\ntitle: 行为型模式-策略模式\ncategories: [\"理论知识\", \"设计模式\", \"行为型模式\"]\ndate: 2023-02-14 11:01:16\ntags: 设计模式\ndescription: 关于设计模式中的策略模式的探索。\n---\n## 一、 定义\n策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。\n\n## ","slug":"理论知识/设计模式/行为型模式/设计模式","published":1,"updated":"2023-02-16T08:04:04.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clegsyv7p0009hwtv4jwh80iq","content":"<h2 id=\"一、-定义\"><a href=\"#一、-定义\" class=\"headerlink\" title=\"一、 定义\"></a>一、 定义</h2><p>策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","site":{"data":{}},"wordcount":54,"excerpt":"","more":"<h2 id=\"一、-定义\"><a href=\"#一、-定义\" class=\"headerlink\" title=\"一、 定义\"></a>一、 定义</h2><p>策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>"},{"title":"设计原则","date":"2023-02-14T04:07:57.000Z","description":null,"_content":"* 找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。\n>把会变化的部分取出并 \"封装\" 起来，好让其他部分不会受到影响。\n\n* 针对接口编程，而不是针对实现编程。\n> 类的行为将被放在分开的类中，此类专门提供某行为接口的实现，这样就不需要知道类具体的实现细节。\n\n* 多用组合，少用继承。\n>使用组合建立系统具有很大的弹性，不仅可以将算法族封装成类，更可以 \"在运行时动态的改变行为\"，只要组合的行为对象符合正确的接口标准即可。","source":"_posts/理论知识/设计模式/设计原则/设计原则.md","raw":"---\ntitle: 设计原则\ncategories: [\"理论知识\", \"设计模式\", \"设计原则\"]\ndate: 2023-02-14 12:07:57\ntags: 设计原则\ndescription: \n---\n* 找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。\n>把会变化的部分取出并 \"封装\" 起来，好让其他部分不会受到影响。\n\n* 针对接口编程，而不是针对实现编程。\n> 类的行为将被放在分开的类中，此类专门提供某行为接口的实现，这样就不需要知道类具体的实现细节。\n\n* 多用组合，少用继承。\n>使用组合建立系统具有很大的弹性，不仅可以将算法族封装成类，更可以 \"在运行时动态的改变行为\"，只要组合的行为对象符合正确的接口标准即可。","slug":"理论知识/设计模式/设计原则/设计原则","published":1,"updated":"2023-02-16T08:04:18.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clegsyv7p000ahwtvcgyf709u","content":"<ul>\n<li><p>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</p>\n<blockquote>\n<p>把会变化的部分取出并 “封装” 起来，好让其他部分不会受到影响。</p>\n</blockquote>\n</li>\n<li><p>针对接口编程，而不是针对实现编程。</p>\n<blockquote>\n<p>类的行为将被放在分开的类中，此类专门提供某行为接口的实现，这样就不需要知道类具体的实现细节。</p>\n</blockquote>\n</li>\n<li><p>多用组合，少用继承。</p>\n<blockquote>\n<p>使用组合建立系统具有很大的弹性，不仅可以将算法族封装成类，更可以 “在运行时动态的改变行为”，只要组合的行为对象符合正确的接口标准即可。</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":210,"excerpt":"","more":"<ul>\n<li><p>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</p>\n<blockquote>\n<p>把会变化的部分取出并 “封装” 起来，好让其他部分不会受到影响。</p>\n</blockquote>\n</li>\n<li><p>针对接口编程，而不是针对实现编程。</p>\n<blockquote>\n<p>类的行为将被放在分开的类中，此类专门提供某行为接口的实现，这样就不需要知道类具体的实现细节。</p>\n</blockquote>\n</li>\n<li><p>多用组合，少用继承。</p>\n<blockquote>\n<p>使用组合建立系统具有很大的弹性，不仅可以将算法族封装成类，更可以 “在运行时动态的改变行为”，只要组合的行为对象符合正确的接口标准即可。</p>\n</blockquote>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clegsyv790001hwtvhvb44qw1","category_id":"clegsyv7e0003hwtvcw7c84bw","_id":"clegsyv7u000lhwtv6k2g9upg"},{"post_id":"clegsyv790001hwtvhvb44qw1","category_id":"clegsyv7t000ihwtv45fz56yu","_id":"clegsyv7v000nhwtvg55vccoj"},{"post_id":"clegsyv7n0007hwtv6p9i1kzw","category_id":"clegsyv7u000khwtveb4t616o","_id":"clegsyv7v000phwtvap01hca1"},{"post_id":"clegsyv7b0002hwtv1s5b5qsr","category_id":"clegsyv7o0008hwtv49b4fuun","_id":"clegsyv7x000shwtvhhrz60xg"},{"post_id":"clegsyv7b0002hwtv1s5b5qsr","category_id":"clegsyv7v000ohwtv2ujn7qe3","_id":"clegsyv7x000thwtv9li0hnx4"},{"post_id":"clegsyv7f0004hwtvfu0h69yf","category_id":"clegsyv7r000chwtvd9vo408s","_id":"clegsyv7y000whwtv93ha5rwp"},{"post_id":"clegsyv7f0004hwtvfu0h69yf","category_id":"clegsyv7x000rhwtv3wiegti2","_id":"clegsyv7y000xhwtvbh55b5e0"},{"post_id":"clegsyv7l0005hwtv26l50k2z","category_id":"clegsyv7o0008hwtv49b4fuun","_id":"clegsyv7y000zhwtv4ofca1wy"},{"post_id":"clegsyv7l0005hwtv26l50k2z","category_id":"clegsyv7v000ohwtv2ujn7qe3","_id":"clegsyv7z0010hwtv4g6cbp6o"},{"post_id":"clegsyv7p0009hwtv4jwh80iq","category_id":"clegsyv7r000chwtvd9vo408s","_id":"clegsyv800013hwtv93by00js"},{"post_id":"clegsyv7p0009hwtv4jwh80iq","category_id":"clegsyv7x000rhwtv3wiegti2","_id":"clegsyv800014hwtv7smz4l9x"},{"post_id":"clegsyv7p0009hwtv4jwh80iq","category_id":"clegsyv7z0011hwtvgig81az6","_id":"clegsyv800015hwtv9s3i2kr5"},{"post_id":"clegsyv7p000ahwtvcgyf709u","category_id":"clegsyv7r000chwtvd9vo408s","_id":"clegsyv800016hwtv1vq8d7v3"},{"post_id":"clegsyv7p000ahwtvcgyf709u","category_id":"clegsyv7x000rhwtv3wiegti2","_id":"clegsyv800017hwtvbcam616v"},{"post_id":"clegsyv7p000ahwtvcgyf709u","category_id":"clegsyv7z0012hwtv6fqld79u","_id":"clegsyv800018hwtv49it4oul"}],"PostTag":[{"post_id":"clegsyv7p0009hwtv4jwh80iq","tag_id":"clegsyv7n0006hwtvefla2xhl","_id":"clegsyv7r000dhwtv7ba23tz0"},{"post_id":"clegsyv7f0004hwtvfu0h69yf","tag_id":"clegsyv7n0006hwtvefla2xhl","_id":"clegsyv7r000ehwtvdqepdzdp"},{"post_id":"clegsyv7n0007hwtv6p9i1kzw","tag_id":"clegsyv7q000bhwtvhz1y4wo3","_id":"clegsyv7t000hhwtv6sds7rj1"},{"post_id":"clegsyv7p000ahwtvcgyf709u","tag_id":"clegsyv7s000fhwtv1uef3za8","_id":"clegsyv7u000jhwtvdaaqeg5q"}],"Tag":[{"name":"设计模式","_id":"clegsyv7n0006hwtvefla2xhl"},{"name":"单词学习","_id":"clegsyv7q000bhwtvhz1y4wo3"},{"name":"设计原则","_id":"clegsyv7s000fhwtv1uef3za8"}]}}